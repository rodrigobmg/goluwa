local header = [[
typedef int64_t la_int64_t;
typedef ssize_t la_ssize_t;
int archive_version_number(void);
const char * archive_version_string(void);
const char * archive_version_details(void);
struct archive;
struct archive_entry;
typedef la_ssize_t archive_read_callback(struct archive *, void *_client_data, const void **_buffer);
typedef la_int64_t archive_skip_callback(struct archive *, void *_client_data, la_int64_t request);
typedef la_int64_t archive_seek_callback(struct archive *, void *_client_data, la_int64_t offset, int whence);
typedef la_ssize_t archive_write_callback(struct archive *, void *_client_data, const void *_buffer, size_t _length);
typedef int archive_open_callback(struct archive *, void *_client_data);
typedef int archive_close_callback(struct archive *, void *_client_data);
typedef int archive_switch_callback(struct archive *, void *_client_data1, void *_client_data2);
typedef const char *archive_passphrase_callback(struct archive *, void *_client_data);
struct archive *archive_read_new(void);
int archive_read_support_compression_all(struct archive *);
int archive_read_support_compression_bzip2(struct archive *);
int archive_read_support_compression_compress(struct archive *);
int archive_read_support_compression_gzip(struct archive *);
int archive_read_support_compression_lzip(struct archive *);
int archive_read_support_compression_lzma(struct archive *);
int archive_read_support_compression_none(struct archive *);
int archive_read_support_compression_program(struct archive *, const char *command);
int archive_read_support_compression_program_signature(struct archive *, const char *, const void * , size_t);
int archive_read_support_compression_rpm(struct archive *);
int archive_read_support_compression_uu(struct archive *);
int archive_read_support_compression_xz(struct archive *);
int archive_read_support_filter_all(struct archive *);
int archive_read_support_filter_bzip2(struct archive *);
int archive_read_support_filter_compress(struct archive *);
int archive_read_support_filter_gzip(struct archive *);
int archive_read_support_filter_grzip(struct archive *);
int archive_read_support_filter_lrzip(struct archive *);
int archive_read_support_filter_lz4(struct archive *);
int archive_read_support_filter_lzip(struct archive *);
int archive_read_support_filter_lzma(struct archive *);
int archive_read_support_filter_lzop(struct archive *);
int archive_read_support_filter_none(struct archive *);
int archive_read_support_filter_program(struct archive *, const char *command);
int archive_read_support_filter_program_signature(struct archive *, const char *, const void * , size_t);
int archive_read_support_filter_rpm(struct archive *);
int archive_read_support_filter_uu(struct archive *);
int archive_read_support_filter_xz(struct archive *);
int archive_read_support_format_7zip(struct archive *);
int archive_read_support_format_all(struct archive *);
int archive_read_support_format_ar(struct archive *);
int archive_read_support_format_by_code(struct archive *, int);
int archive_read_support_format_cab(struct archive *);
int archive_read_support_format_cpio(struct archive *);
int archive_read_support_format_empty(struct archive *);
int archive_read_support_format_gnutar(struct archive *);
int archive_read_support_format_iso9660(struct archive *);
int archive_read_support_format_lha(struct archive *);
int archive_read_support_format_mtree(struct archive *);
int archive_read_support_format_rar(struct archive *);
int archive_read_support_format_raw(struct archive *);
int archive_read_support_format_tar(struct archive *);
int archive_read_support_format_warc(struct archive *);
int archive_read_support_format_xar(struct archive *);
int archive_read_support_format_zip(struct archive *);
int archive_read_support_format_zip_streamable(struct archive *);
int archive_read_support_format_zip_seekable(struct archive *);
int archive_read_set_format(struct archive *, int);
int archive_read_append_filter(struct archive *, int);
int archive_read_append_filter_program(struct archive *, const char *);
int archive_read_append_filter_program_signature(struct archive *, const char *, const void * , size_t);
int archive_read_set_open_callback(struct archive *, archive_open_callback *);
int archive_read_set_read_callback(struct archive *, archive_read_callback *);
int archive_read_set_seek_callback(struct archive *, archive_seek_callback *);
int archive_read_set_skip_callback(struct archive *, archive_skip_callback *);
int archive_read_set_close_callback(struct archive *, archive_close_callback *);
int archive_read_set_switch_callback(struct archive *, archive_switch_callback *);
int archive_read_set_callback_data(struct archive *, void *);
int archive_read_set_callback_data2(struct archive *, void *, unsigned int);
int archive_read_add_callback_data(struct archive *, void *, unsigned int);
int archive_read_append_callback_data(struct archive *, void *);
int archive_read_prepend_callback_data(struct archive *, void *);
int archive_read_open1(struct archive *);
int archive_read_open(struct archive *, void *_client_data, archive_open_callback *, archive_read_callback *, archive_close_callback *);
int archive_read_open2(struct archive *, void *_client_data, archive_open_callback *, archive_read_callback *, archive_skip_callback *, archive_close_callback *);
int archive_read_open_filename(struct archive *, const char *_filename, size_t _block_size);
int archive_read_open_filenames(struct archive *, const char **_filenames, size_t _block_size);
int archive_read_open_filename_w(struct archive *, const wchar_t *_filename, size_t _block_size);
int archive_read_open_file(struct archive *, const char *_filename, size_t _block_size);
int archive_read_open_memory(struct archive *, const void * buff, size_t size);
int archive_read_open_memory2(struct archive *a, const void *buff, size_t size, size_t read_size);
int archive_read_open_fd(struct archive *, int _fd, size_t _block_size);
//int archive_read_open_FILE(struct archive *, FILE *_file);
int archive_read_next_header(struct archive *, struct archive_entry **);
int archive_read_next_header2(struct archive *, struct archive_entry *);
la_int64_t archive_read_header_position(struct archive *);
int archive_read_has_encrypted_entries(struct archive *);
int archive_read_format_capabilities(struct archive *);
la_ssize_t archive_read_data(struct archive *, void *, size_t);
la_int64_t archive_seek_data(struct archive *, la_int64_t, int);
int archive_read_data_block(struct archive *a, const void **buff, size_t *size, la_int64_t *offset);
int archive_read_data_skip(struct archive *);
int archive_read_data_into_fd(struct archive *, int fd);
int archive_read_set_format_option(struct archive *_a, const char *m, const char *o, const char *v);
int archive_read_set_filter_option(struct archive *_a, const char *m, const char *o, const char *v);
int archive_read_set_option(struct archive *_a, const char *m, const char *o, const char *v);
int archive_read_set_options(struct archive *_a, const char *opts);
int archive_read_add_passphrase(struct archive *, const char *);
int archive_read_set_passphrase_callback(struct archive *, void *client_data, archive_passphrase_callback *);
int archive_read_extract(struct archive *, struct archive_entry *, int flags);
int archive_read_extract2(struct archive *, struct archive_entry *, struct archive * );
void archive_read_extract_set_progress_callback(struct archive *, void (*_progress_func)(void *), void *_user_data);
void archive_read_extract_set_skip_file(struct archive *, la_int64_t, la_int64_t);
int archive_read_close(struct archive *);
int archive_read_free(struct archive *);
int archive_read_finish(struct archive *) ;
struct archive *archive_write_new(void);
int archive_write_set_bytes_per_block(struct archive *, int bytes_per_block);
int archive_write_get_bytes_per_block(struct archive *);
int archive_write_set_bytes_in_last_block(struct archive *, int bytes_in_last_block);
int archive_write_get_bytes_in_last_block(struct archive *);
int archive_write_set_skip_file(struct archive *, la_int64_t, la_int64_t);
int archive_write_set_compression_bzip2(struct archive *);
int archive_write_set_compression_compress(struct archive *);
int archive_write_set_compression_gzip(struct archive *);
int archive_write_set_compression_lzip(struct archive *);
int archive_write_set_compression_lzma(struct archive *);
int archive_write_set_compression_none(struct archive *);
int archive_write_set_compression_program(struct archive *, const char *cmd);
int archive_write_set_compression_xz(struct archive *);
int archive_write_add_filter(struct archive *, int filter_code);
int archive_write_add_filter_by_name(struct archive *, const char *name);
int archive_write_add_filter_b64encode(struct archive *);
int archive_write_add_filter_bzip2(struct archive *);
int archive_write_add_filter_compress(struct archive *);
int archive_write_add_filter_grzip(struct archive *);
int archive_write_add_filter_gzip(struct archive *);
int archive_write_add_filter_lrzip(struct archive *);
int archive_write_add_filter_lz4(struct archive *);
int archive_write_add_filter_lzip(struct archive *);
int archive_write_add_filter_lzma(struct archive *);
int archive_write_add_filter_lzop(struct archive *);
int archive_write_add_filter_none(struct archive *);
int archive_write_add_filter_program(struct archive *, const char *cmd);
int archive_write_add_filter_uuencode(struct archive *);
int archive_write_add_filter_xz(struct archive *);
int archive_write_set_format(struct archive *, int format_code);
int archive_write_set_format_by_name(struct archive *, const char *name);
int archive_write_set_format_7zip(struct archive *);
int archive_write_set_format_ar_bsd(struct archive *);
int archive_write_set_format_ar_svr4(struct archive *);
int archive_write_set_format_cpio(struct archive *);
int archive_write_set_format_cpio_newc(struct archive *);
int archive_write_set_format_gnutar(struct archive *);
int archive_write_set_format_iso9660(struct archive *);
int archive_write_set_format_mtree(struct archive *);
int archive_write_set_format_mtree_classic(struct archive *);
int archive_write_set_format_pax(struct archive *);
int archive_write_set_format_pax_restricted(struct archive *);
int archive_write_set_format_raw(struct archive *);
int archive_write_set_format_shar(struct archive *);
int archive_write_set_format_shar_dump(struct archive *);
int archive_write_set_format_ustar(struct archive *);
int archive_write_set_format_v7tar(struct archive *);
int archive_write_set_format_warc(struct archive *);
int archive_write_set_format_xar(struct archive *);
int archive_write_set_format_zip(struct archive *);
int archive_write_set_format_filter_by_ext(struct archive *a, const char *filename);
int archive_write_set_format_filter_by_ext_def(struct archive *a, const char *filename, const char * def_ext);
int archive_write_zip_set_compression_deflate(struct archive *);
int archive_write_zip_set_compression_store(struct archive *);
int archive_write_open(struct archive *, void *, archive_open_callback *, archive_write_callback *, archive_close_callback *);
int archive_write_open_fd(struct archive *, int _fd);
int archive_write_open_filename(struct archive *, const char *_file);
int archive_write_open_filename_w(struct archive *, const wchar_t *_file);
int archive_write_open_file(struct archive *, const char *_file);
//int archive_write_open_FILE(struct archive *, FILE *);
int archive_write_open_memory(struct archive *, void *_buffer, size_t _buffSize, size_t *_used);
int archive_write_header(struct archive *, struct archive_entry *);
la_ssize_t archive_write_data(struct archive *, const void *, size_t);
la_ssize_t archive_write_data_block(struct archive *, const void *, size_t, la_int64_t);
int archive_write_finish_entry(struct archive *);
int archive_write_close(struct archive *);
int archive_write_fail(struct archive *);
int archive_write_free(struct archive *);
int archive_write_finish(struct archive *) ;
int archive_write_set_format_option(struct archive *_a, const char *m, const char *o, const char *v);
int archive_write_set_filter_option(struct archive *_a, const char *m, const char *o, const char *v);
int archive_write_set_option(struct archive *_a, const char *m, const char *o, const char *v);
int archive_write_set_options(struct archive *_a, const char *opts);
int archive_write_set_passphrase(struct archive *_a, const char *p);
int archive_write_set_passphrase_callback(struct archive *, void *client_data, archive_passphrase_callback *);
struct archive *archive_write_disk_new(void);
int archive_write_disk_set_skip_file(struct archive *, la_int64_t, la_int64_t);
int archive_write_disk_set_options(struct archive *, int flags);
int archive_write_disk_set_standard_lookup(struct archive *);
int archive_write_disk_set_group_lookup(struct archive *, void *, la_int64_t (*)(void *, const char *, la_int64_t), void (* )(void *));
int archive_write_disk_set_user_lookup(struct archive *, void * , la_int64_t (*)(void *, const char *, la_int64_t), void (* )(void *));
la_int64_t archive_write_disk_gid(struct archive *, const char *, la_int64_t);
la_int64_t archive_write_disk_uid(struct archive *, const char *, la_int64_t);
struct archive *archive_read_disk_new(void);
int archive_read_disk_set_symlink_logical(struct archive *);
int archive_read_disk_set_symlink_physical(struct archive *);
int archive_read_disk_set_symlink_hybrid(struct archive *);
int archive_read_disk_entry_from_file(struct archive *,
struct archive_entry *, int , const struct stat *);
const char *archive_read_disk_gname(struct archive *, la_int64_t);
const char *archive_read_disk_uname(struct archive *, la_int64_t);
int archive_read_disk_set_standard_lookup(struct archive *);
int archive_read_disk_set_gname_lookup(struct archive *, void * ,const char *(* )(void *, la_int64_t), void (* )(void *));
int archive_read_disk_set_uname_lookup(struct archive *, void * , const char *(* )(void *, la_int64_t), void (* )(void *));
int archive_read_disk_open(struct archive *, const char *);
int archive_read_disk_open_w(struct archive *, const wchar_t *);
int archive_read_disk_descend(struct archive *);
int archive_read_disk_can_descend(struct archive *);
int archive_read_disk_current_filesystem(struct archive *);
int archive_read_disk_current_filesystem_is_synthetic(struct archive *);
int archive_read_disk_current_filesystem_is_remote(struct archive *);
int archive_read_disk_set_atime_restored(struct archive *);
int archive_read_disk_set_behavior(struct archive *, int flags);
int archive_read_disk_set_matching(struct archive *, struct archive *_matching, void (*_excluded_func)(struct archive *, void *, struct archive_entry *), void *_client_data);
int archive_read_disk_set_metadata_filter_callback(struct archive *, int (*_metadata_filter_func)(struct archive *, void *, struct archive_entry *), void *_client_data);
int archive_free(struct archive *);
int archive_filter_count(struct archive *);
la_int64_t archive_filter_bytes(struct archive *, int);
int archive_filter_code(struct archive *, int);
const char * archive_filter_name(struct archive *, int);
la_int64_t archive_position_compressed(struct archive *);
la_int64_t archive_position_uncompressed(struct archive *);
const char *archive_compression_name(struct archive *);
int archive_compression(struct archive *);
int archive_errno(struct archive *);
const char *archive_error_string(struct archive *);
const char *archive_format_name(struct archive *);
int archive_format(struct archive *);
void archive_clear_error(struct archive *);
void archive_set_error(struct archive *, int _err, const char *fmt, ...) __attribute__((__format__ (__printf__, 3, 4)));
void archive_copy_error(struct archive *dest,struct archive *src);
int archive_file_count(struct archive *);
struct archive *archive_match_new(void);
int archive_match_free(struct archive *);
int archive_match_excluded(struct archive *, struct archive_entry *);
int archive_match_path_excluded(struct archive *, struct archive_entry *);
int archive_match_exclude_pattern(struct archive *, const char *);
int archive_match_exclude_pattern_w(struct archive *, const wchar_t *);
int archive_match_exclude_pattern_from_file(struct archive *, const char *, int _nullSeparator);
int archive_match_exclude_pattern_from_file_w(struct archive *, const wchar_t *, int _nullSeparator);
int archive_match_include_pattern(struct archive *, const char *);
int archive_match_include_pattern_w(struct archive *, const wchar_t *);
int archive_match_include_pattern_from_file(struct archive *, const char *, int _nullSeparator);
int archive_match_include_pattern_from_file_w(struct archive *, const wchar_t *, int _nullSeparator);
int archive_match_path_unmatched_inclusions(struct archive *);
int archive_match_path_unmatched_inclusions_next(struct archive *, const char **);
int archive_match_path_unmatched_inclusions_next_w(struct archive *, const wchar_t **);
int archive_match_time_excluded(struct archive *, struct archive_entry *);
int archive_match_include_time(struct archive *, int _flag, time_t _sec, long _nsec);
int archive_match_include_date(struct archive *, int _flag, const char *_datestr);
int archive_match_include_date_w(struct archive *, int _flag, const wchar_t *_datestr);
int archive_match_include_file_time(struct archive *, int _flag, const char *_pathname);
int archive_match_include_file_time_w(struct archive *, int _flag, const wchar_t *_pathname);
int archive_match_exclude_entry(struct archive *, int _flag, struct archive_entry *);
int archive_match_owner_excluded(struct archive *, struct archive_entry *);
int archive_match_include_uid(struct archive *, la_int64_t);
int archive_match_include_gid(struct archive *, la_int64_t);
int archive_match_include_uname(struct archive *, const char *);
int archive_match_include_uname_w(struct archive *, const wchar_t *);
int archive_match_include_gname(struct archive *, const char *);
int archive_match_include_gname_w(struct archive *, const wchar_t *);
int archive_utility_string_sort(char **);
]]

local ffi = require("ffi")

ffi.cdef(header)

local lib = {
	lib = ffi.load("archive")
}

for name in header:gmatch("archive_(.-)%(") do
	local ok, err = pcall(function()
		lib[name] = lib.lib["archive_" .. name]
	end)

	print(ok, err, name)
end

return lib
