return [[typedef float btScalar;
struct btCollisionResult;
extern btScalar gContactBreakingThreshold;
//typedef bool (*ContactDestroyedCallback)(void* userPersistentData);
//typedef bool (*ContactProcessedCallback)(btManifoldPoint& cp,void* body0,void* body1);
//extern ContactDestroyedCallback	gContactDestroyedCallback;
//extern ContactProcessedCallback gContactProcessedCallback;
enum btContactManifoldTypes
{
	MIN_CONTACT_MANIFOLD_TYPE = 1024,
	BT_PERSISTENT_MANIFOLD_TYPE
};
typedef float  plReal;
struct FILEFORMAT_HEIGHTFIELD_HEADER
{
	unsigned __int32 Magic;
	unsigned __int32 Version;
	unsigned __int32 NumXVertices;
	unsigned __int32 NumZVertices;
	unsigned __int32 Width;
	unsigned __int32 Length;
	unsigned __int32 Height;
	unsigned __int32 Future[25];
};
typedef plReal  plVector3[3];
typedef plReal  plQuaternion[4];
typedef struct plPhysicsSdkHandle__ { int unused; } *plPhysicsSdkHandle;
typedef struct plDynamicsWorldHandle__ { int unused; } *plDynamicsWorldHandle;
typedef struct plRigidBodyHandle__ { int unused; } *plRigidBodyHandle;
typedef struct plCollisionShapeHandle__ { int unused; } *plCollisionShapeHandle;
typedef struct plConstraintHandle__ { int unused; } *plConstraintHandle;
typedef struct plMeshInterfaceHandle__ { int unused; } *plMeshInterfaceHandle;
typedef struct plHeightFieldHandle__ { int unused; } *plHeightFieldHandle;
typedef struct plCollisionBroadphaseHandle__ { int unused; } *plCollisionBroadphaseHandle;
typedef struct plBroadphaseProxyHandle__ { int unused; } *plBroadphaseProxyHandle;
typedef struct plCollisionWorldHandle__ { int unused; } *plCollisionWorldHandle;
typedef struct plHingeConstraint__ { int unused; } *plHingeConstraint;
extern __declspec(dllexport) plPhysicsSdkHandle  plNewBulletSdk();
extern __declspec(dllexport) void    plDeletePhysicsSdk(plPhysicsSdkHandle  physicsSdk);
typedef void(*btBroadphaseCallback)(void *clientData, void *object1, void *object2);
extern __declspec(dllexport) plCollisionBroadphaseHandle  plCreateSapBroadphase(btBroadphaseCallback beginCallback, btBroadphaseCallback endCallback);
extern __declspec(dllexport) void  plDestroyBroadphase(plCollisionBroadphaseHandle bp);
extern __declspec(dllexport)  plBroadphaseProxyHandle plCreateProxy(plCollisionBroadphaseHandle bp, void *clientData, plReal minX, plReal minY, plReal minZ, plReal maxX, plReal maxY, plReal maxZ);
extern __declspec(dllexport) void plDestroyProxy(plCollisionBroadphaseHandle bp, plBroadphaseProxyHandle proxyHandle);
extern __declspec(dllexport) void plSetBoundingBox(plBroadphaseProxyHandle proxyHandle, plReal minX, plReal minY, plReal minZ, plReal maxX, plReal maxY, plReal maxZ);
extern __declspec(dllexport) plCollisionWorldHandle plCreateCollisionWorld(plPhysicsSdkHandle physicsSdk);
extern __declspec(dllexport) plDynamicsWorldHandle  plCreateDynamicsWorld(plVector3 worldMin, plVector3 worldMax);
extern __declspec(dllexport) void                   plDeleteDynamicsWorld(plDynamicsWorldHandle world);
extern __declspec(dllexport) void                   plStepSimulation(plDynamicsWorldHandle, plReal timeStep);
extern __declspec(dllexport) void                   plAddRigidBody(plDynamicsWorldHandle world, plRigidBodyHandle object);
extern __declspec(dllexport) void                   plRemoveRigidBody(plDynamicsWorldHandle world, plRigidBodyHandle object);
extern __declspec(dllexport) int                    pl_DynamicsWorld_getNumCollisionObjects(plDynamicsWorldHandle world);
extern __declspec(dllexport) plRigidBodyHandle      pl_DynamicsWorld_getCollisionObject(plDynamicsWorldHandle world, int objectIndex);
extern __declspec(dllexport) void                   pl_DynamicsWorld_addVehicle(plDynamicsWorldHandle world, plConstraintHandle vehicle);
extern __declspec(dllexport) void                   pl_DynamicsWorld_removeVehicle(plDynamicsWorldHandle world, plConstraintHandle vehicle);
//extern __declspec(dllexport) void                   pl_setCollisionPocessedCallback( ContactProcessedCallback fn );
struct plTransform
{
	plReal m_Matrix[16];
};
extern __declspec(dllexport) plRigidBodyHandle      plCreateRigidBody(  void *user_data, float mass, plCollisionShapeHandle cshape );
extern __declspec(dllexport) void                   plSetActivationState(plRigidBodyHandle body, int state);
extern __declspec(dllexport) void                   plDeleteRigidBody(plRigidBodyHandle body);
extern __declspec(dllexport) void                   pl_RigidBody_getOpenGLMatrix(plRigidBodyHandle cbody, plReal *mtx);
extern __declspec(dllexport) plCollisionShapeHandle pl_RigidBody_getCollisionShape(plRigidBodyHandle cbody);
extern __declspec(dllexport) void                   pl_RigidBody_setActivationState(plRigidBodyHandle cbody, int newState);
extern __declspec(dllexport) void                   pl_RigidBody_getRelPosition(plRigidBodyHandle object, const plReal *relPos, plReal *worldPos);
extern __declspec(dllexport) void                   pl_RigidBody_setWorldTransform(plRigidBodyHandle object, const plTransform *transform);
extern __declspec(dllexport) void				   pl_RigidBody_setCollisionFlags(plRigidBodyHandle cbody, int flags);
extern __declspec(dllexport) int					   pl_RigidBody_getCollisionFlags(plRigidBodyHandle cbody);
extern __declspec(dllexport) plCollisionShapeHandle plNewSphereShape(plReal radius);
extern __declspec(dllexport) plCollisionShapeHandle plNewBoxShape(plReal x, plReal y, plReal z);
extern __declspec(dllexport) plCollisionShapeHandle plNewCapsuleShape(plReal radius, plReal height);
extern __declspec(dllexport) plCollisionShapeHandle plNewConeShape(plReal radius, plReal height);
extern __declspec(dllexport) plCollisionShapeHandle plNewCylinderShape(plReal radius, plReal height);
extern __declspec(dllexport) plCollisionShapeHandle plNewCompoundShape();
extern __declspec(dllexport) void                   plAddChildShape(plCollisionShapeHandle compoundShape, plCollisionShapeHandle childShape, plVector3 childPos, plQuaternion childOrn);
extern __declspec(dllexport) void                   pl_CompoundShape_addChildShape(plCollisionShapeHandle compoundShapeHandle, plCollisionShapeHandle childShapeHandle,  const plTransform *transform);
extern __declspec(dllexport) void                   plDeleteShape(plCollisionShapeHandle shape);
extern __declspec(dllexport) int                    pl_CollisionShape_getShapeType(plCollisionShapeHandle shape);
extern __declspec(dllexport) int                    pl_CollisionShape_isConcave(plCollisionShapeHandle shape);
extern __declspec(dllexport) void                  *pl_CollisionShape_getUserPointer(plCollisionShapeHandle shape);
extern __declspec(dllexport) void                   pl_CollisionShape_setUserPointer(plCollisionShapeHandle shape, void *up);
extern __declspec(dllexport) plCollisionShapeHandle pl_UniformScalingShape_getChildShape(plCollisionShapeHandle shape);
extern __declspec(dllexport) plReal                 pl_UniformScalingShape_getUniformScalingFactor(plCollisionShapeHandle shape);
extern __declspec(dllexport) int                    pl_CompoundShape_getNumChildShapes(plCollisionShapeHandle shape);
extern __declspec(dllexport) plCollisionShapeHandle pl_CompoundShape_getChildShape(plCollisionShapeHandle shape, int childIndex);
extern __declspec(dllexport) void                   pl_CompoundShape_getChildTransform(plCollisionShapeHandle shape, int childIndex, plTransform *childTransform);
extern __declspec(dllexport) plCollisionShapeHandle plCreateBvhTriangleMeshShape(int numTriangles, int *triangleIndexBase, int triangleIndexStride, int numVertices, plReal *vertexBase, int vertexStride, int bUseQuantizedAabbCompression);
extern __declspec(dllexport) plCollisionShapeHandle plCreateDeserializedBvhTriangleMeshShape(
	int numTriangles, int *triangleIndexBase, int triangleIndexStride, int numVertices, plReal *vertexBase, int vertexStride, int bUseQuantizedAabbCompression,
	unsigned char *buffer, size_t bufferSize, int bSwapEndian);
extern __declspec(dllexport) void                   pl_BvhTriangleMeshShape_Serialize(plCollisionShapeHandle triShape, unsigned char **memBuf, size_t *memBufSize, int bSwapEndianness);
extern __declspec(dllexport) void                   pl_BvhTriangleMeshShape_SerializeDone(plCollisionShapeHandle triShape, unsigned char *memBuf);
extern __declspec(dllexport) void                   pl_BoxShape_getHalfExtentsWithMargin(plCollisionShapeHandle shape, plReal *halfExtents);
typedef void (*plprocessTriangle_t)(void *opaque, plReal *triangle, int partId, int triangleIndex);
extern __declspec(dllexport) void                   pl_ConcaveShape_processAllTriangles(plCollisionShapeHandle shape, plprocessTriangle_t callback, void *callbackOpaque, const plReal *aabbMin, const plReal *aabbMax);
extern __declspec(dllexport) plConstraintHandle     plCreateVehicle(plDynamicsWorldHandle world, const btRaycastVehicle::btVehicleTuning *tuning, plRigidBodyHandle chassis);
extern __declspec(dllexport) void                   plDeleteVehicle(plConstraintHandle);
extern __declspec(dllexport) void                   pl_Vehicle_applyEngineTorque(plConstraintHandle vehicle, btScalar force);
extern __declspec(dllexport) void                   pl_Vehicle_setBrake(plConstraintHandle vehicle, plReal brakePower, plReal parkingBrakePower);
extern __declspec(dllexport) void                   pl_Vehicle_setSteeringValue(plConstraintHandle vehicle, plReal steeringValue, int wheelIndex);
extern __declspec(dllexport) plReal                 pl_Vehicle_getCurrentSpeed(plConstraintHandle vehicle);
extern __declspec(dllexport) plRigidBodyHandle      pl_Vehicle_getRigidBody(plConstraintHandle vehicle);
extern __declspec(dllexport) void                   pl_Vehicle_setCoordinateSystem(plConstraintHandle vehicle, int rightIndex, int upIndex, int forwardIndex);
extern __declspec(dllexport) void                   pl_Vehicle_addWheel(plConstraintHandle vehicle, const plReal *connectionPointCS0, const plReal *wheelDirectionCS0, const plReal *wheelAxleCS, plReal suspensionRestLength, plReal wheelRadius, const btRaycastVehicle::btVehicleTuning *tuning, int isFrontWheel);
extern __declspec(dllexport) int                    pl_Vehicle_getNumWheels(plConstraintHandle vehicle);
extern __declspec(dllexport) void                   pl_Vehicle_resetSuspension(plConstraintHandle vehicle);
extern __declspec(dllexport) plReal                 pl_Vehicle_getRearAxleSpeed(plConstraintHandle vehicle);
extern __declspec(dllexport) void                   pl_Vehicle_setAirDragMultiplier(plConstraintHandle vehicle, plReal airDragMultiplier);
extern __declspec(dllexport) void                   pl_Vehicle_setRollingResistancePerWheel(plConstraintHandle vehicle, plReal rollingResistancePerWheel);
extern __declspec(dllexport) void                   pl_Vehicle_setSwayBarRate(plConstraintHandle vehicle, plReal swayBarRate);
extern __declspec(dllexport) void                   pl_Vehicle_updateWheelTransform(plConstraintHandle vehicle, int wheelIndex, int bInterpolatedTransform);
extern __declspec(dllexport) void                   pl_Vehicle_getWheelTransform(plConstraintHandle vehicle, int wheelIndex, plTransform *wheelTransform);
extern __declspec(dllexport) const btWheelInfo     *pl_Vehicle_getWheelInfo(plConstraintHandle vehicle, int wheelIndex);
extern __declspec(dllexport) plCollisionShapeHandle plNewConvexHullShape();
extern __declspec(dllexport) void                   plAddVertex(plCollisionShapeHandle convexHull, plReal x, plReal y, plReal z);
extern __declspec(dllexport) plMeshInterfaceHandle  plNewMeshInterface();
extern __declspec(dllexport) plHeightFieldHandle    plNewHeightField(double *&heightfieldData, FILE *heightFieldFile = 0, FILEFORMAT_HEIGHTFIELD_HEADER *hdr = 0);
extern __declspec(dllexport) void                   plAddTriangle(plMeshInterfaceHandle meshHandle, plVector3 v0, plVector3 v1, plVector3 v2);
extern __declspec(dllexport) plCollisionShapeHandle plNewStaticTriangleMeshShape(plMeshInterfaceHandle);
extern __declspec(dllexport) void                   plSetScaling(plCollisionShapeHandle shape, plVector3 scaling);
extern __declspec(dllexport) void                    plGetOpenGLMatrix(plRigidBodyHandle object, plReal *matrix);
extern __declspec(dllexport) void                    plGetPosition(plRigidBodyHandle object, plVector3 position);
extern __declspec(dllexport) void                    plGetSize(plRigidBodyHandle object, plReal &width, plReal &height, plReal &length);
extern __declspec(dllexport) void                    plGetOrientation(plRigidBodyHandle object, plQuaternion orientation);
extern __declspec(dllexport) void                    plSetPosition(plRigidBodyHandle object, const plVector3 position);
extern __declspec(dllexport) void                    plApplyImpulse(plRigidBodyHandle object, const plVector3 force);
extern __declspec(dllexport) void                    plApplyTorque(plRigidBodyHandle object, const plVector3 impulse);
extern __declspec(dllexport) void                    plApplyDamping(plRigidBodyHandle object, plReal timeStep);
extern __declspec(dllexport) void                    plGetLinearVelocity(plRigidBodyHandle object, plVector3 vel);
extern __declspec(dllexport) void                    plGetAngularVelocity(plRigidBodyHandle object, plVector3 vel);
extern __declspec(dllexport) plHingeConstraint       plCreateConstraint(plDynamicsWorldHandle world, plRigidBodyHandle object1, plRigidBodyHandle object2);
extern __declspec(dllexport) void                    plSetConstraintTransform(plHingeConstraint constraint, plQuaternion quat);
extern __declspec(dllexport) void                    plSetConstraintOrigin(plHingeConstraint constraintH, plVector3 pos);
extern __declspec(dllexport) void                    plGetConstraintOrigin(plHingeConstraint constraintH, plVector3 pos);
extern __declspec(dllexport) void                    plSetOrientation(plRigidBodyHandle object, const plQuaternion orientation);
extern __declspec(dllexport) void                    plSetDamping(plRigidBodyHandle object, plReal linDamping, plReal angDamping);
extern __declspec(dllexport) void                    plSetRestitution(plRigidBodyHandle object, plReal restitution);
extern __declspec(dllexport) void                    plSetMassProps(plRigidBodyHandle object, plReal mass);
extern __declspec(dllexport) void                    plSetGravity(plRigidBodyHandle object, plReal gravity);
extern __declspec(dllexport) void                    plSetLinVelocity(plRigidBodyHandle object, plReal vel);
extern __declspec(dllexport) void                    plSetEuler(plReal yaw, plReal pitch, plReal roll, plQuaternion orient);
extern __declspec(dllexport) void                    plInitVector(plVector3 vec, plReal x, plReal y, plReal z);
extern __declspec(dllexport) void                    plSetQuadIdentity(plQuaternion a);
extern __declspec(dllexport) void                    plMultiplyQuat(const plQuaternion a, const plQuaternion b, plQuaternion out);
extern __declspec(dllexport) void                    plTransformVector(const plQuaternion quat, const plReal x, const plReal y, const plReal z, plVector3 out);
extern __declspec(dllexport) void                    plAddVectors(const plVector3 &a, const plVector3 &b, plVector3 &res);
typedef struct plRayCastResult
{
	plRigidBodyHandle       m_body;
	plCollisionShapeHandle  m_shape;
	plVector3               m_positionWorld;
	plVector3               m_normalWorld;
} plRayCastResult;
extern __declspec(dllexport) int plClosestRayCast(plDynamicsWorldHandle world, const plVector3 &rayStart, const plVector3 &rayEnd, plRayCastResult &res);
]]