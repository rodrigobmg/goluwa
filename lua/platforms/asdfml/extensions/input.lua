input.debug = false local console_key_input = input.SetupInputEvent("ConsoleKey")event.AddListener("OnConsoleKeyPressed", "input", function(key)	local ret = console_key_input(key, true)		-- :(	timer.Simple(0, function() console_key_input(key, false) end)		return retend)local console_char_input = input.SetupInputEvent("ConsoleChar")event.AddListener("OnConsoleCharPressed", "input", function(char)	local ret = console_char_input(char, true)		-- :(	timer.Simple(0, function() console_char_input(char, false) end)		return retend) local key_input = input.SetupInputEvent("Key")local key_names = {}for k,v in pairs(e) do	if k:sub(0, 4) == "KEY_" then		key_names[tonumber(v)] = k:sub(5):lower()	endendevent.AddListener("OnKeyPressed", "input", function(params)	local ret = key_input(key_names[tonumber(params.key.code)], true)			return retend)event.AddListener("OnKeyReleased", "input", function(params)	local ret = key_input(key_names[tonumber(params.key.code)], false)		return retend)do return endinput.Binds = {}function input.Bind(key, cmd)	check(key, "string")	check(cmd, "string", "nil")	luadata.SetKeyValueInFile("%DATA%/input.txt", key, cmd)	input.Binds[key] = cmdendfunction input.Initialize()	input.Binds = luadata.ReadFile("%DATA%/input.txt")endfunction input.Call(key, press)	if input.DisableFocus then return end	press = press and "" or "~"	local cmd = input.Binds[press .. key]	if cmd then		console.RunString(cmd)		return false	endendevent.AddListener("OnKeyInput", "keybind", input.Call, print, math.huge)function input.Command(ply, line, key, ...)	if key then		cmd = table.concat({...}, " ")		input.Bind(key, cmd)	endendconsole.AddCommand("bind", input.Command)