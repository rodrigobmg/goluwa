local def = [==[
typedef struct GLUquadric *GLUquadric;
typedef struct GLUtesselator *GLUtesselator;
typedef struct GLUnurbs *GLUnurbs;
typedef unsigned int GLenum;
typedef unsigned int GLbitfield;
typedef unsigned int GLuint;
typedef int GLint;
typedef int GLsizei;
typedef unsigned char GLboolean;
typedef signed char GLbyte;
typedef short GLshort;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned long GLulong;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void GLvoid;
typedef signed long long GLint64EXT;
typedef unsigned long long GLuint64EXT;
typedef GLint64EXT GLint64;
typedef GLuint64EXT GLuint64;
typedef struct __GLsync *GLsync;
typedef char GLchar;
typedef ptrdiff_t GLintptr;
typedef ptrdiff_t GLsizeiptr;
typedef ptrdiff_t GLintptrARB;
typedef char GLcharARB;
typedef struct _cl_event *cl_event;
typedef unsigned int GLhandleARB;
typedef ptrdiff_t GLsizeiptrARB;
typedef unsigned short GLhalf;
typedef GLintptr GLvdpauSurfaceNV;

void glAccum (GLenum op, GLfloat value);
void glAlphaFunc (GLenum func, GLclampf ref);
GLboolean glAreTexturesResident (GLsizei n, const GLuint *textures, GLboolean *residences);
void glArrayElement (GLint i);
void glBegin (GLenum mode);
void glBindTexture (GLenum target, GLuint texture);
void glBitmap (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
void glBlendFunc (GLenum sfactor, GLenum dfactor);
void glCallList (GLuint list);
void glCallLists (GLsizei n, GLenum type, const GLvoid *lists);
void glClear (GLbitfield mask);
void glClearAccum (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void glClearColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void glClearDepth (GLclampd depth);
void glClearIndex (GLfloat c);
void glClearStencil (GLint s);
void glClipPlane (GLenum plane, const GLdouble *equation);
void glColor3b (GLbyte red, GLbyte green, GLbyte blue);
void glColor3bv (const GLbyte *v);
void glColor3d (GLdouble red, GLdouble green, GLdouble blue);
void glColor3dv (const GLdouble *v);
void glColor3f (GLfloat red, GLfloat green, GLfloat blue);
void glColor3fv (const GLfloat *v);
void glColor3i (GLint red, GLint green, GLint blue);
void glColor3iv (const GLint *v);
void glColor3s (GLshort red, GLshort green, GLshort blue);
void glColor3sv (const GLshort *v);
void glColor3ub (GLubyte red, GLubyte green, GLubyte blue);
void glColor3ubv (const GLubyte *v);
void glColor3ui (GLuint red, GLuint green, GLuint blue);
void glColor3uiv (const GLuint *v);
void glColor3us (GLushort red, GLushort green, GLushort blue);
void glColor3usv (const GLushort *v);
void glColor4b (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
void glColor4bv (const GLbyte *v);
void glColor4d (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
void glColor4dv (const GLdouble *v);
void glColor4f (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void glColor4fv (const GLfloat *v);
void glColor4i (GLint red, GLint green, GLint blue, GLint alpha);
void glColor4iv (const GLint *v);
void glColor4s (GLshort red, GLshort green, GLshort blue, GLshort alpha);
void glColor4sv (const GLshort *v);
void glColor4ub (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
void glColor4ubv (const GLubyte *v);
void glColor4ui (GLuint red, GLuint green, GLuint blue, GLuint alpha);
void glColor4uiv (const GLuint *v);
void glColor4us (GLushort red, GLushort green, GLushort blue, GLushort alpha);
void glColor4usv (const GLushort *v);
void glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void glColorMaterial (GLenum face, GLenum mode);
void glColorPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void glCopyPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
void glCopyTexImage1D (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);
void glCopyTexImage2D (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void glCullFace (GLenum mode);
void glDeleteLists (GLuint list, GLsizei range);
void glDeleteTextures (GLsizei n, const GLuint *textures);
void glDepthFunc (GLenum func);
void glDepthMask (GLboolean flag);
void glDepthRange (GLclampd zNear, GLclampd zFar);
void glDisable (GLenum cap);
void glDisableClientState (GLenum array);
void glDrawArrays (GLenum mode, GLint first, GLsizei count);
void glDrawBuffer (GLenum mode);
void glDrawElements (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
void glDrawPixels (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
void glEdgeFlag (GLboolean flag);
void glEdgeFlagPointer (GLsizei stride, const GLvoid *pointer);
void glEdgeFlagv (const GLboolean *flag);
void glEnable (GLenum cap);
void glEnableClientState (GLenum array);
void glEnd (void);
void glEndList (void);
void glEvalCoord1d (GLdouble u);
void glEvalCoord1dv (const GLdouble *u);
void glEvalCoord1f (GLfloat u);
void glEvalCoord1fv (const GLfloat *u);
void glEvalCoord2d (GLdouble u, GLdouble v);
void glEvalCoord2dv (const GLdouble *u);
void glEvalCoord2f (GLfloat u, GLfloat v);
void glEvalCoord2fv (const GLfloat *u);
void glEvalMesh1 (GLenum mode, GLint i1, GLint i2);
void glEvalMesh2 (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
void glEvalPoint1 (GLint i);
void glEvalPoint2 (GLint i, GLint j);
void glFeedbackBuffer (GLsizei size, GLenum type, GLfloat *buffer);
void glFinish (void);
void glFlush (void);
void glFogf (GLenum pname, GLfloat param);
void glFogfv (GLenum pname, const GLfloat *params);
void glFogi (GLenum pname, GLint param);
void glFogiv (GLenum pname, const GLint *params);
void glFrontFace (GLenum mode);
void glFrustum (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLuint glGenLists (GLsizei range);
void glGenTextures (GLsizei n, GLuint *textures);
void glGetBooleanv (GLenum pname, GLboolean *params);
void glGetClipPlane (GLenum plane, GLdouble *equation);
void glGetDoublev (GLenum pname, GLdouble *params);
GLenum glGetError (void);
void glGetFloatv (GLenum pname, GLfloat *params);
void glGetIntegerv (GLenum pname, GLint *params);
void glGetLightfv (GLenum light, GLenum pname, GLfloat *params);
void glGetLightiv (GLenum light, GLenum pname, GLint *params);
void glGetMapdv (GLenum target, GLenum query, GLdouble *v);
void glGetMapfv (GLenum target, GLenum query, GLfloat *v);
void glGetMapiv (GLenum target, GLenum query, GLint *v);
void glGetMaterialfv (GLenum face, GLenum pname, GLfloat *params);
void glGetMaterialiv (GLenum face, GLenum pname, GLint *params);
void glGetPixelMapfv (GLenum map, GLfloat *values);
void glGetPixelMapuiv (GLenum map, GLuint *values);
void glGetPixelMapusv (GLenum map, GLushort *values);
void glGetPointerv (GLenum pname, GLvoid* *params);
void glGetPolygonStipple (GLubyte *mask);
const GLubyte * glGetString (GLenum name);
void glGetTexEnvfv (GLenum target, GLenum pname, GLfloat *params);
void glGetTexEnviv (GLenum target, GLenum pname, GLint *params);
void glGetTexGendv (GLenum coord, GLenum pname, GLdouble *params);
void glGetTexGenfv (GLenum coord, GLenum pname, GLfloat *params);
void glGetTexGeniv (GLenum coord, GLenum pname, GLint *params);
void glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
void glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat *params);
void glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint *params);
void glGetTexParameterfv (GLenum target, GLenum pname, GLfloat *params);
void glGetTexParameteriv (GLenum target, GLenum pname, GLint *params);
void glHint (GLenum target, GLenum mode);
void glIndexMask (GLuint mask);
void glIndexPointer (GLenum type, GLsizei stride, const GLvoid *pointer);
void glIndexd (GLdouble c);
void glIndexdv (const GLdouble *c);
void glIndexf (GLfloat c);
void glIndexfv (const GLfloat *c);
void glIndexi (GLint c);
void glIndexiv (const GLint *c);
void glIndexs (GLshort c);
void glIndexsv (const GLshort *c);
void glIndexub (GLubyte c);
void glIndexubv (const GLubyte *c);
void glInitNames (void);
void glInterleavedArrays (GLenum format, GLsizei stride, const GLvoid *pointer);
GLboolean glIsEnabled (GLenum cap);
GLboolean glIsList (GLuint list);
GLboolean glIsTexture (GLuint texture);
void glLightModelf (GLenum pname, GLfloat param);
void glLightModelfv (GLenum pname, const GLfloat *params);
void glLightModeli (GLenum pname, GLint param);
void glLightModeliv (GLenum pname, const GLint *params);
void glLightf (GLenum light, GLenum pname, GLfloat param);
void glLightfv (GLenum light, GLenum pname, const GLfloat *params);
void glLighti (GLenum light, GLenum pname, GLint param);
void glLightiv (GLenum light, GLenum pname, const GLint *params);
void glLineStipple (GLint factor, GLushort pattern);
void glLineWidth (GLfloat width);
void glListBase (GLuint base);
void glLoadIdentity (void);
void glLoadMatrixd (const GLdouble *m);
void glLoadMatrixf (const GLfloat *m);
void glLoadName (GLuint name);
void glLogicOp (GLenum opcode);
void glMap1d (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
void glMap1f (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
void glMap2d (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
void glMap2f (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
void glMapGrid1d (GLint un, GLdouble u1, GLdouble u2);
void glMapGrid1f (GLint un, GLfloat u1, GLfloat u2);
void glMapGrid2d (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
void glMapGrid2f (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
void glMaterialf (GLenum face, GLenum pname, GLfloat param);
void glMaterialfv (GLenum face, GLenum pname, const GLfloat *params);
void glMateriali (GLenum face, GLenum pname, GLint param);
void glMaterialiv (GLenum face, GLenum pname, const GLint *params);
void glMatrixMode (GLenum mode);
void glMultMatrixd (const GLdouble *m);
void glMultMatrixf (const GLfloat *m);
void glNewList (GLuint list, GLenum mode);
void glNormal3b (GLbyte nx, GLbyte ny, GLbyte nz);
void glNormal3bv (const GLbyte *v);
void glNormal3d (GLdouble nx, GLdouble ny, GLdouble nz);
void glNormal3dv (const GLdouble *v);
void glNormal3f (GLfloat nx, GLfloat ny, GLfloat nz);
void glNormal3fv (const GLfloat *v);
void glNormal3i (GLint nx, GLint ny, GLint nz);
void glNormal3iv (const GLint *v);
void glNormal3s (GLshort nx, GLshort ny, GLshort nz);
void glNormal3sv (const GLshort *v);
void glNormalPointer (GLenum type, GLsizei stride, const GLvoid *pointer);
void glOrtho (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void glPassThrough (GLfloat token);
void glPixelMapfv (GLenum map, GLsizei mapsize, const GLfloat *values);
void glPixelMapuiv (GLenum map, GLsizei mapsize, const GLuint *values);
void glPixelMapusv (GLenum map, GLsizei mapsize, const GLushort *values);
void glPixelStoref (GLenum pname, GLfloat param);
void glPixelStorei (GLenum pname, GLint param);
void glPixelTransferf (GLenum pname, GLfloat param);
void glPixelTransferi (GLenum pname, GLint param);
void glPixelZoom (GLfloat xfactor, GLfloat yfactor);
void glPointSize (GLfloat size);
void glPolygonMode (GLenum face, GLenum mode);
void glPolygonOffset (GLfloat factor, GLfloat units);
void glPolygonStipple (const GLubyte *mask);
void glPopAttrib (void);
void glPopClientAttrib (void);
void glPopMatrix (void);
void glPopName (void);
void glPrioritizeTextures (GLsizei n, const GLuint *textures, const GLclampf *priorities);
void glPushAttrib (GLbitfield mask);
void glPushClientAttrib (GLbitfield mask);
void glPushMatrix (void);
void glPushName (GLuint name);
void glRasterPos2d (GLdouble x, GLdouble y);
void glRasterPos2dv (const GLdouble *v);
void glRasterPos2f (GLfloat x, GLfloat y);
void glRasterPos2fv (const GLfloat *v);
void glRasterPos2i (GLint x, GLint y);
void glRasterPos2iv (const GLint *v);
void glRasterPos2s (GLshort x, GLshort y);
void glRasterPos2sv (const GLshort *v);
void glRasterPos3d (GLdouble x, GLdouble y, GLdouble z);
void glRasterPos3dv (const GLdouble *v);
void glRasterPos3f (GLfloat x, GLfloat y, GLfloat z);
void glRasterPos3fv (const GLfloat *v);
void glRasterPos3i (GLint x, GLint y, GLint z);
void glRasterPos3iv (const GLint *v);
void glRasterPos3s (GLshort x, GLshort y, GLshort z);
void glRasterPos3sv (const GLshort *v);
void glRasterPos4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glRasterPos4dv (const GLdouble *v);
void glRasterPos4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glRasterPos4fv (const GLfloat *v);
void glRasterPos4i (GLint x, GLint y, GLint z, GLint w);
void glRasterPos4iv (const GLint *v);
void glRasterPos4s (GLshort x, GLshort y, GLshort z, GLshort w);
void glRasterPos4sv (const GLshort *v);
void glReadBuffer (GLenum mode);
void glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
void glRectd (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
void glRectdv (const GLdouble *v1, const GLdouble *v2);
void glRectf (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
void glRectfv (const GLfloat *v1, const GLfloat *v2);
void glRecti (GLint x1, GLint y1, GLint x2, GLint y2);
void glRectiv (const GLint *v1, const GLint *v2);
void glRects (GLshort x1, GLshort y1, GLshort x2, GLshort y2);
void glRectsv (const GLshort *v1, const GLshort *v2);
GLint glRenderMode (GLenum mode);
void glRotated (GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void glRotatef (GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void glScaled (GLdouble x, GLdouble y, GLdouble z);
void glScalef (GLfloat x, GLfloat y, GLfloat z);
void glScissor (GLint x, GLint y, GLsizei width, GLsizei height);
void glSelectBuffer (GLsizei size, GLuint *buffer);
void glShadeModel (GLenum mode);
void glStencilFunc (GLenum func, GLint ref, GLuint mask);
void glStencilMask (GLuint mask);
void glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
void glTexCoord1d (GLdouble s);
void glTexCoord1dv (const GLdouble *v);
void glTexCoord1f (GLfloat s);
void glTexCoord1fv (const GLfloat *v);
void glTexCoord1i (GLint s);
void glTexCoord1iv (const GLint *v);
void glTexCoord1s (GLshort s);
void glTexCoord1sv (const GLshort *v);
void glTexCoord2d (GLdouble s, GLdouble t);
void glTexCoord2dv (const GLdouble *v);
void glTexCoord2f (GLfloat s, GLfloat t);
void glTexCoord2fv (const GLfloat *v);
void glTexCoord2i (GLint s, GLint t);
void glTexCoord2iv (const GLint *v);
void glTexCoord2s (GLshort s, GLshort t);
void glTexCoord2sv (const GLshort *v);
void glTexCoord3d (GLdouble s, GLdouble t, GLdouble r);
void glTexCoord3dv (const GLdouble *v);
void glTexCoord3f (GLfloat s, GLfloat t, GLfloat r);
void glTexCoord3fv (const GLfloat *v);
void glTexCoord3i (GLint s, GLint t, GLint r);
void glTexCoord3iv (const GLint *v);
void glTexCoord3s (GLshort s, GLshort t, GLshort r);
void glTexCoord3sv (const GLshort *v);
void glTexCoord4d (GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void glTexCoord4dv (const GLdouble *v);
void glTexCoord4f (GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void glTexCoord4fv (const GLfloat *v);
void glTexCoord4i (GLint s, GLint t, GLint r, GLint q);
void glTexCoord4iv (const GLint *v);
void glTexCoord4s (GLshort s, GLshort t, GLshort r, GLshort q);
void glTexCoord4sv (const GLshort *v);
void glTexCoordPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void glTexEnvf (GLenum target, GLenum pname, GLfloat param);
void glTexEnvfv (GLenum target, GLenum pname, const GLfloat *params);
void glTexEnvi (GLenum target, GLenum pname, GLint param);
void glTexEnviv (GLenum target, GLenum pname, const GLint *params);
void glTexGend (GLenum coord, GLenum pname, GLdouble param);
void glTexGendv (GLenum coord, GLenum pname, const GLdouble *params);
void glTexGenf (GLenum coord, GLenum pname, GLfloat param);
void glTexGenfv (GLenum coord, GLenum pname, const GLfloat *params);
void glTexGeni (GLenum coord, GLenum pname, GLint param);
void glTexGeniv (GLenum coord, GLenum pname, const GLint *params);
void glTexImage1D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void glTexParameterf (GLenum target, GLenum pname, GLfloat param);
void glTexParameterfv (GLenum target, GLenum pname, const GLfloat *params);
void glTexParameteri (GLenum target, GLenum pname, GLint param);
void glTexParameteriv (GLenum target, GLenum pname, const GLint *params);
void glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
void glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
void glTranslated (GLdouble x, GLdouble y, GLdouble z);
void glTranslatef (GLfloat x, GLfloat y, GLfloat z);
void glVertex2d (GLdouble x, GLdouble y);
void glVertex2dv (const GLdouble *v);
void glVertex2f (GLfloat x, GLfloat y);
void glVertex2fv (const GLfloat *v);
void glVertex2i (GLint x, GLint y);
void glVertex2iv (const GLint *v);
void glVertex2s (GLshort x, GLshort y);
void glVertex2sv (const GLshort *v);
void glVertex3d (GLdouble x, GLdouble y, GLdouble z);
void glVertex3dv (const GLdouble *v);
void glVertex3f (GLfloat x, GLfloat y, GLfloat z);
void glVertex3fv (const GLfloat *v);
void glVertex3i (GLint x, GLint y, GLint z);
void glVertex3iv (const GLint *v);
void glVertex3s (GLshort x, GLshort y, GLshort z);
void glVertex3sv (const GLshort *v);
void glVertex4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glVertex4dv (const GLdouble *v);
void glVertex4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glVertex4fv (const GLfloat *v);
void glVertex4i (GLint x, GLint y, GLint z, GLint w);
void glVertex4iv (const GLint *v);
void glVertex4s (GLshort x, GLshort y, GLshort z, GLshort w);
void glVertex4sv (const GLshort *v);
void glVertexPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void glViewport (GLint x, GLint y, GLsizei width, GLsizei height);
const GLubyte* gluErrorString ( GLenum errCode);
const wchar_t* gluErrorUnicodeStringEXT ( GLenum errCode);
const GLubyte* gluGetString ( GLenum name);
void gluOrtho2D ( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top);
void gluPerspective ( GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar);
void gluPickMatrix ( GLdouble x, GLdouble y, GLdouble width, GLdouble height, GLint viewport[4]);
void gluLookAt ( GLdouble eyex, GLdouble eyey, GLdouble eyez, GLdouble centerx, GLdouble centery, GLdouble centerz, GLdouble upx, GLdouble upy, GLdouble upz);
int gluProject ( GLdouble objx, GLdouble objy, GLdouble objz, const GLdouble modelMatrix[16], const GLdouble projMatrix[16], const GLint viewport[4], GLdouble *winx, GLdouble *winy, GLdouble *winz);
int gluUnProject ( GLdouble winx, GLdouble winy, GLdouble winz, const GLdouble modelMatrix[16], const GLdouble projMatrix[16], const GLint viewport[4], GLdouble *objx, GLdouble *objy, GLdouble *objz);
int gluScaleImage ( GLenum format, GLint widthin, GLint heightin, GLenum typein, const void *datain, GLint widthout, GLint heightout, GLenum typeout, void *dataout);
int gluBuild1DMipmaps ( GLenum target, GLint components, GLint width, GLenum format, GLenum type, const void *data);
int gluBuild2DMipmaps ( GLenum target, GLint components, GLint width, GLint height, GLenum format, GLenum type, const void *data);
GLUquadric* gluNewQuadric (void);
void gluDeleteQuadric ( GLUquadric *state);
void gluQuadricNormals ( GLUquadric *quadObject, GLenum normals);
void gluQuadricTexture ( GLUquadric *quadObject, GLboolean textureCoords);
void gluQuadricOrientation ( GLUquadric *quadObject, GLenum orientation);
void gluQuadricDrawStyle ( GLUquadric *quadObject, GLenum drawStyle);
void gluCylinder ( GLUquadric *qobj, GLdouble baseRadius, GLdouble topRadius, GLdouble height, GLint slices, GLint stacks);
void gluDisk ( GLUquadric *qobj, GLdouble innerRadius, GLdouble outerRadius, GLint slices, GLint loops);
void gluPartialDisk ( GLUquadric *qobj, GLdouble innerRadius, GLdouble outerRadius, GLint slices, GLint loops, GLdouble startAngle, GLdouble sweepAngle);
void gluSphere ( GLUquadric *qobj, GLdouble radius, GLint slices, GLint stacks);
void gluQuadricCallback ( GLUquadric *qobj, GLenum which, void (__stdcall* fn)());
GLUtesselator* gluNewTess( void );
void gluDeleteTess( GLUtesselator *tess );
void gluTessBeginPolygon( GLUtesselator *tess, void *polygon_data );
void gluTessBeginContour( GLUtesselator *tess );
void gluTessVertex( GLUtesselator *tess, GLdouble coords[3], void *data );
void gluTessEndContour( GLUtesselator *tess );
void gluTessEndPolygon( GLUtesselator *tess );
void gluTessProperty( GLUtesselator *tess, GLenum which, GLdouble value );
void gluTessNormal( GLUtesselator *tess, GLdouble x, GLdouble y, GLdouble z );
void gluTessCallback( GLUtesselator *tess, GLenum which, void (*fn)());
void gluGetTessProperty( GLUtesselator *tess, GLenum which, GLdouble *value );
GLUnurbs* gluNewNurbsRenderer (void);
void gluDeleteNurbsRenderer ( GLUnurbs *nobj);
void gluBeginSurface ( GLUnurbs *nobj);
void gluBeginCurve ( GLUnurbs *nobj);
void gluEndCurve ( GLUnurbs *nobj);
void gluEndSurface ( GLUnurbs *nobj);
void gluBeginTrim ( GLUnurbs *nobj);
void gluEndTrim ( GLUnurbs *nobj);
void gluPwlCurve ( GLUnurbs *nobj, GLint count, GLfloat *array, GLint stride, GLenum type);
void gluNurbsCurve ( GLUnurbs *nobj, GLint nknots, GLfloat *knot, GLint stride, GLfloat *ctlarray, GLint order, GLenum type);
void gluNurbsSurface( GLUnurbs *nobj, GLint sknot_count, float *sknot, GLint tknot_count, GLfloat *tknot, GLint s_stride, GLint t_stride, GLfloat *ctlarray, GLint sorder, GLint torder, GLenum type);
void gluLoadSamplingMatrices ( GLUnurbs *nobj, const GLfloat modelMatrix[16], const GLfloat projMatrix[16], const GLint viewport[4] );
void gluNurbsProperty ( GLUnurbs *nobj, GLenum property, GLfloat value );
void gluGetNurbsProperty ( GLUnurbs *nobj, GLenum property, GLfloat *value );
void gluNurbsCallback ( GLUnurbs *nobj, GLenum which, void (__stdcall* fn)() );
void gluBeginPolygon( GLUtesselator *tess );
void gluNextContour( GLUtesselator *tess, GLenum type );
void gluEndPolygon( GLUtesselator *tess );
void __glewCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void __glewDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
void __glewTexImage3D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void __glewTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
void __glewActiveTexture(GLenum texture);
void __glewClientActiveTexture(GLenum texture);
void __glewCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
void __glewCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
void __glewCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
void __glewCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
void __glewCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
void __glewCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
void __glewGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img);
void __glewLoadTransposeMatrixd(const GLdouble m[16]);
void __glewLoadTransposeMatrixf(const GLfloat m[16]);
void __glewMultTransposeMatrixd(const GLdouble m[16]);
void __glewMultTransposeMatrixf(const GLfloat m[16]);
void __glewMultiTexCoord1d(GLenum target, GLdouble s);
void __glewMultiTexCoord1dv(GLenum target, const GLdouble *v);
void __glewMultiTexCoord1f(GLenum target, GLfloat s);
void __glewMultiTexCoord1fv(GLenum target, const GLfloat *v);
void __glewMultiTexCoord1i(GLenum target, GLint s);
void __glewMultiTexCoord1iv(GLenum target, const GLint *v);
void __glewMultiTexCoord1s(GLenum target, GLshort s);
void __glewMultiTexCoord1sv(GLenum target, const GLshort *v);
void __glewMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t);
void __glewMultiTexCoord2dv(GLenum target, const GLdouble *v);
void __glewMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t);
void __glewMultiTexCoord2fv(GLenum target, const GLfloat *v);
void __glewMultiTexCoord2i(GLenum target, GLint s, GLint t);
void __glewMultiTexCoord2iv(GLenum target, const GLint *v);
void __glewMultiTexCoord2s(GLenum target, GLshort s, GLshort t);
void __glewMultiTexCoord2sv(GLenum target, const GLshort *v);
void __glewMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r);
void __glewMultiTexCoord3dv(GLenum target, const GLdouble *v);
void __glewMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r);
void __glewMultiTexCoord3fv(GLenum target, const GLfloat *v);
void __glewMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r);
void __glewMultiTexCoord3iv(GLenum target, const GLint *v);
void __glewMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r);
void __glewMultiTexCoord3sv(GLenum target, const GLshort *v);
void __glewMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void __glewMultiTexCoord4dv(GLenum target, const GLdouble *v);
void __glewMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void __glewMultiTexCoord4fv(GLenum target, const GLfloat *v);
void __glewMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q);
void __glewMultiTexCoord4iv(GLenum target, const GLint *v);
void __glewMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
void __glewMultiTexCoord4sv(GLenum target, const GLshort *v);
void __glewSampleCoverage(GLclampf value, GLboolean invert);
void __glewBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void __glewBlendEquation(GLenum mode);
void __glewBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
void __glewFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer);
void __glewFogCoordd(GLdouble coord);
void __glewFogCoorddv(const GLdouble *coord);
void __glewFogCoordf(GLfloat coord);
void __glewFogCoordfv(const GLfloat *coord);
void __glewMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
void __glewMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei drawcount);
void __glewPointParameterf(GLenum pname, GLfloat param);
void __glewPointParameterfv(GLenum pname, const GLfloat *params);
void __glewPointParameteri(GLenum pname, GLint param);
void __glewPointParameteriv(GLenum pname, const GLint *params);
void __glewSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);
void __glewSecondaryColor3bv(const GLbyte *v);
void __glewSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);
void __glewSecondaryColor3dv(const GLdouble *v);
void __glewSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);
void __glewSecondaryColor3fv(const GLfloat *v);
void __glewSecondaryColor3i(GLint red, GLint green, GLint blue);
void __glewSecondaryColor3iv(const GLint *v);
void __glewSecondaryColor3s(GLshort red, GLshort green, GLshort blue);
void __glewSecondaryColor3sv(const GLshort *v);
void __glewSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);
void __glewSecondaryColor3ubv(const GLubyte *v);
void __glewSecondaryColor3ui(GLuint red, GLuint green, GLuint blue);
void __glewSecondaryColor3uiv(const GLuint *v);
void __glewSecondaryColor3us(GLushort red, GLushort green, GLushort blue);
void __glewSecondaryColor3usv(const GLushort *v);
void __glewSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void __glewWindowPos2d(GLdouble x, GLdouble y);
void __glewWindowPos2dv(const GLdouble *p);
void __glewWindowPos2f(GLfloat x, GLfloat y);
void __glewWindowPos2fv(const GLfloat *p);
void __glewWindowPos2i(GLint x, GLint y);
void __glewWindowPos2iv(const GLint *p);
void __glewWindowPos2s(GLshort x, GLshort y);
void __glewWindowPos2sv(const GLshort *p);
void __glewWindowPos3d(GLdouble x, GLdouble y, GLdouble z);
void __glewWindowPos3dv(const GLdouble *p);
void __glewWindowPos3f(GLfloat x, GLfloat y, GLfloat z);
void __glewWindowPos3fv(const GLfloat *p);
void __glewWindowPos3i(GLint x, GLint y, GLint z);
void __glewWindowPos3iv(const GLint *p);
void __glewWindowPos3s(GLshort x, GLshort y, GLshort z);
void __glewWindowPos3sv(const GLshort *p);
void __glewBeginQuery(GLenum target, GLuint id);
void __glewBindBuffer(GLenum target, GLuint buffer);
void __glewBufferData(GLenum target, GLsizeiptr size, const GLvoid* data, GLenum usage);
void __glewBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid* data);
void __glewDeleteBuffers(GLsizei n, const GLuint* buffers);
void __glewDeleteQueries(GLsizei n, const GLuint* ids);
void __glewEndQuery(GLenum target);
void __glewGenBuffers(GLsizei n, GLuint* buffers);
void __glewGenQueries(GLsizei n, GLuint* ids);
void __glewGetBufferParameteriv(GLenum target, GLenum pname, GLint* params);
void __glewGetBufferPointerv(GLenum target, GLenum pname, GLvoid** params);
void __glewGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid* data);
void __glewGetQueryObjectiv(GLuint id, GLenum pname, GLint* params);
void __glewGetQueryObjectuiv(GLuint id, GLenum pname, GLuint* params);
void __glewGetQueryiv(GLenum target, GLenum pname, GLint* params);
GLboolean __glewIsBuffer(GLuint buffer);
GLboolean __glewIsQuery(GLuint id);
GLvoid* __glewMapBuffer(GLenum target, GLenum access);
GLboolean __glewUnmapBuffer(GLenum target);
void __glewAttachShader(GLuint program, GLuint shader);
void __glewBindAttribLocation(GLuint program, GLuint index, const GLchar* name);
void __glewBlendEquationSeparate(GLenum, GLenum);
void __glewCompileShader(GLuint shader);
GLuint __glewCreateProgram(void);
GLuint __glewCreateShader(GLenum type);
void __glewDeleteProgram(GLuint program);
void __glewDeleteShader(GLuint shader);
void __glewDetachShader(GLuint program, GLuint shader);
void __glewDisableVertexAttribArray(GLuint);
void __glewDrawBuffers(GLsizei n, const GLenum* bufs);
void __glewEnableVertexAttribArray(GLuint);
void __glewGetActiveAttrib(GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
void __glewGetActiveUniform(GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
void __glewGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
GLint __glewGetAttribLocation(GLuint program, const GLchar* name);
void __glewGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
void __glewGetProgramiv(GLuint program, GLenum pname, GLint* param);
void __glewGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
void __glewGetShaderSource(GLuint obj, GLsizei maxLength, GLsizei* length, GLchar* source);
void __glewGetShaderiv(GLuint shader, GLenum pname, GLint* param);
GLint __glewGetUniformLocation(GLuint program, const GLchar* name);
void __glewGetUniformfv(GLuint program, GLint location, GLfloat* params);
void __glewGetUniformiv(GLuint program, GLint location, GLint* params);
void __glewGetVertexAttribPointerv(GLuint, GLenum, GLvoid**);
void __glewGetVertexAttribdv(GLuint, GLenum, GLdouble*);
void __glewGetVertexAttribfv(GLuint, GLenum, GLfloat*);
void __glewGetVertexAttribiv(GLuint, GLenum, GLint*);
GLboolean __glewIsProgram(GLuint program);
GLboolean __glewIsShader(GLuint shader);
void __glewLinkProgram(GLuint program);
void __glewShaderSource(GLuint shader, GLsizei count, const GLchar** strings, const GLint* lengths);
void __glewStencilFuncSeparate(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
void __glewStencilMaskSeparate(GLenum, GLuint);
void __glewStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
void __glewUniform1f(GLint location, GLfloat v0);
void __glewUniform1fv(GLint location, GLsizei count, const GLfloat* value);
void __glewUniform1i(GLint location, GLint v0);
void __glewUniform1iv(GLint location, GLsizei count, const GLint* value);
void __glewUniform2f(GLint location, GLfloat v0, GLfloat v1);
void __glewUniform2fv(GLint location, GLsizei count, const GLfloat* value);
void __glewUniform2i(GLint location, GLint v0, GLint v1);
void __glewUniform2iv(GLint location, GLsizei count, const GLint* value);
void __glewUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void __glewUniform3fv(GLint location, GLsizei count, const GLfloat* value);
void __glewUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
void __glewUniform3iv(GLint location, GLsizei count, const GLint* value);
void __glewUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void __glewUniform4fv(GLint location, GLsizei count, const GLfloat* value);
void __glewUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void __glewUniform4iv(GLint location, GLsizei count, const GLint* value);
void __glewUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewUseProgram(GLuint program);
void __glewValidateProgram(GLuint program);
void __glewVertexAttrib1d(GLuint index, GLdouble x);
void __glewVertexAttrib1dv(GLuint index, const GLdouble* v);
void __glewVertexAttrib1f(GLuint index, GLfloat x);
void __glewVertexAttrib1fv(GLuint index, const GLfloat* v);
void __glewVertexAttrib1s(GLuint index, GLshort x);
void __glewVertexAttrib1sv(GLuint index, const GLshort* v);
void __glewVertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
void __glewVertexAttrib2dv(GLuint index, const GLdouble* v);
void __glewVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
void __glewVertexAttrib2fv(GLuint index, const GLfloat* v);
void __glewVertexAttrib2s(GLuint index, GLshort x, GLshort y);
void __glewVertexAttrib2sv(GLuint index, const GLshort* v);
void __glewVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void __glewVertexAttrib3dv(GLuint index, const GLdouble* v);
void __glewVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void __glewVertexAttrib3fv(GLuint index, const GLfloat* v);
void __glewVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
void __glewVertexAttrib3sv(GLuint index, const GLshort* v);
void __glewVertexAttrib4Nbv(GLuint index, const GLbyte* v);
void __glewVertexAttrib4Niv(GLuint index, const GLint* v);
void __glewVertexAttrib4Nsv(GLuint index, const GLshort* v);
void __glewVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void __glewVertexAttrib4Nubv(GLuint index, const GLubyte* v);
void __glewVertexAttrib4Nuiv(GLuint index, const GLuint* v);
void __glewVertexAttrib4Nusv(GLuint index, const GLushort* v);
void __glewVertexAttrib4bv(GLuint index, const GLbyte* v);
void __glewVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void __glewVertexAttrib4dv(GLuint index, const GLdouble* v);
void __glewVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void __glewVertexAttrib4fv(GLuint index, const GLfloat* v);
void __glewVertexAttrib4iv(GLuint index, const GLint* v);
void __glewVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void __glewVertexAttrib4sv(GLuint index, const GLshort* v);
void __glewVertexAttrib4ubv(GLuint index, const GLubyte* v);
void __glewVertexAttrib4uiv(GLuint index, const GLuint* v);
void __glewVertexAttrib4usv(GLuint index, const GLushort* v);
void __glewVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer);
void __glewUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void __glewUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void __glewUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void __glewUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void __glewUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void __glewUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void __glewBeginConditionalRender(GLuint, GLenum);
void __glewBeginTransformFeedback(GLenum);
void __glewBindFragDataLocation(GLuint, GLuint, const GLchar*);
void __glewClampColor(GLenum, GLenum);
void __glewClearBufferfi(GLenum, GLint, GLfloat, GLint);
void __glewClearBufferfv(GLenum, GLint, const GLfloat*);
void __glewClearBufferiv(GLenum, GLint, const GLint*);
void __glewClearBufferuiv(GLenum, GLint, const GLuint*);
void __glewColorMaski(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
void __glewDisablei(GLenum, GLuint);
void __glewEnablei(GLenum, GLuint);
void __glewEndConditionalRender(void);
void __glewEndTransformFeedback(void);
void __glewGetBooleani_v(GLenum, GLuint, GLboolean*);
GLint __glewGetFragDataLocation(GLuint, const GLchar*);
const GLubyte* __glewGetStringi(GLenum, GLuint);
void __glewGetTexParameterIiv(GLenum, GLenum, GLint*);
void __glewGetTexParameterIuiv(GLenum, GLenum, GLuint*);
void __glewGetTransformFeedbackVarying(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
void __glewGetUniformuiv(GLuint, GLint, GLuint*);
void __glewGetVertexAttribIiv(GLuint, GLenum, GLint*);
void __glewGetVertexAttribIuiv(GLuint, GLenum, GLuint*);
GLboolean __glewIsEnabledi(GLenum, GLuint);
void __glewTexParameterIiv(GLenum, GLenum, const GLint*);
void __glewTexParameterIuiv(GLenum, GLenum, const GLuint*);
void __glewTransformFeedbackVaryings(GLuint, GLsizei, const GLchar **, GLenum);
void __glewUniform1ui(GLint, GLuint);
void __glewUniform1uiv(GLint, GLsizei, const GLuint*);
void __glewUniform2ui(GLint, GLuint, GLuint);
void __glewUniform2uiv(GLint, GLsizei, const GLuint*);
void __glewUniform3ui(GLint, GLuint, GLuint, GLuint);
void __glewUniform3uiv(GLint, GLsizei, const GLuint*);
void __glewUniform4ui(GLint, GLuint, GLuint, GLuint, GLuint);
void __glewUniform4uiv(GLint, GLsizei, const GLuint*);
void __glewVertexAttribI1i(GLuint, GLint);
void __glewVertexAttribI1iv(GLuint, const GLint*);
void __glewVertexAttribI1ui(GLuint, GLuint);
void __glewVertexAttribI1uiv(GLuint, const GLuint*);
void __glewVertexAttribI2i(GLuint, GLint, GLint);
void __glewVertexAttribI2iv(GLuint, const GLint*);
void __glewVertexAttribI2ui(GLuint, GLuint, GLuint);
void __glewVertexAttribI2uiv(GLuint, const GLuint*);
void __glewVertexAttribI3i(GLuint, GLint, GLint, GLint);
void __glewVertexAttribI3iv(GLuint, const GLint*);
void __glewVertexAttribI3ui(GLuint, GLuint, GLuint, GLuint);
void __glewVertexAttribI3uiv(GLuint, const GLuint*);
void __glewVertexAttribI4bv(GLuint, const GLbyte*);
void __glewVertexAttribI4i(GLuint, GLint, GLint, GLint, GLint);
void __glewVertexAttribI4iv(GLuint, const GLint*);
void __glewVertexAttribI4sv(GLuint, const GLshort*);
void __glewVertexAttribI4ubv(GLuint, const GLubyte*);
void __glewVertexAttribI4ui(GLuint, GLuint, GLuint, GLuint, GLuint);
void __glewVertexAttribI4uiv(GLuint, const GLuint*);
void __glewVertexAttribI4usv(GLuint, const GLushort*);
void __glewVertexAttribIPointer(GLuint, GLint, GLenum, GLsizei, const GLvoid*);
void __glewDrawArraysInstanced(GLenum, GLint, GLsizei, GLsizei);
void __glewDrawElementsInstanced(GLenum, GLsizei, GLenum, const GLvoid*, GLsizei);
void __glewPrimitiveRestartIndex(GLuint);
void __glewTexBuffer(GLenum, GLenum, GLuint);
void __glewFramebufferTexture(GLenum, GLenum, GLuint, GLint);
void __glewGetBufferParameteri64v(GLenum, GLenum, GLint64 *);
void __glewGetInteger64i_v(GLenum, GLuint, GLint64 *);
void __glewVertexAttribDivisor(GLuint index, GLuint divisor);
void __glewBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
void __glewBlendEquationi(GLuint buf, GLenum mode);
void __glewBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void __glewBlendFunci(GLuint buf, GLenum src, GLenum dst);
void __glewMinSampleShading(GLclampf value);
void __glewDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
void __glewDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar* buf);
GLuint __glewGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum* categories, GLuint* severities, GLuint* ids, GLsizei* lengths, GLchar* message);
void __glewBlendEquationIndexedAMD(GLuint buf, GLenum mode);
void __glewBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
void __glewBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst);
void __glewBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void __glewMultiDrawArraysIndirectAMD(GLenum mode, const void* indirect, GLsizei primcount, GLsizei stride);
void __glewMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void* indirect, GLsizei primcount, GLsizei stride);
void __glewDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint* names);
void __glewGenNamesAMD(GLenum identifier, GLuint num, GLuint* names);
GLboolean __glewIsNameAMD(GLenum identifier, GLuint name);
void __glewBeginPerfMonitorAMD(GLuint monitor);
void __glewDeletePerfMonitorsAMD(GLsizei n, GLuint* monitors);
void __glewEndPerfMonitorAMD(GLuint monitor);
void __glewGenPerfMonitorsAMD(GLsizei n, GLuint* monitors);
void __glewGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint *bytesWritten);
void __glewGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void* data);
void __glewGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei* length, GLchar *counterString);
void __glewGetPerfMonitorCountersAMD(GLuint group, GLint* numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters);
void __glewGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei* length, GLchar *groupString);
void __glewGetPerfMonitorGroupsAMD(GLint* numGroups, GLsizei groupsSize, GLuint *groups);
void __glewSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint* counterList);
void __glewSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat* val);
void __glewStencilOpValueAMD(GLenum face, GLuint value);
void __glewTessellationFactorAMD(GLfloat factor);
void __glewTessellationModeAMD(GLenum mode);
void __glewDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count);
void __glewDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
void __glewElementPointerAPPLE(GLenum type, const void* pointer);
void __glewMultiDrawElementArrayAPPLE(GLenum mode, const GLint* first, const GLsizei *count, GLsizei primcount);
void __glewMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei *count, GLsizei primcount);
void __glewDeleteFencesAPPLE(GLsizei n, const GLuint* fences);
void __glewFinishFenceAPPLE(GLuint fence);
void __glewFinishObjectAPPLE(GLenum object, GLint name);
void __glewGenFencesAPPLE(GLsizei n, GLuint* fences);
GLboolean __glewIsFenceAPPLE(GLuint fence);
void __glewSetFenceAPPLE(GLuint fence);
GLboolean __glewTestFenceAPPLE(GLuint fence);
GLboolean __glewTestObjectAPPLE(GLenum object, GLuint name);
void __glewBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param);
void __glewFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size);
void __glewGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint* params);
GLenum __glewObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option);
GLenum __glewObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option);
void __glewGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid **params);
void __glewTextureRangeAPPLE(GLenum target, GLsizei length, GLvoid *pointer);
void __glewBindVertexArrayAPPLE(GLuint array);
void __glewDeleteVertexArraysAPPLE(GLsizei n, const GLuint* arrays);
void __glewGenVertexArraysAPPLE(GLsizei n, const GLuint* arrays);
GLboolean __glewIsVertexArrayAPPLE(GLuint array);
void __glewFlushVertexArrayRangeAPPLE(GLsizei length, void* pointer);
void __glewVertexArrayParameteriAPPLE(GLenum pname, GLint param);
void __glewVertexArrayRangeAPPLE(GLsizei length, void* pointer);
void __glewDisableVertexAttribAPPLE(GLuint index, GLenum pname);
void __glewEnableVertexAttribAPPLE(GLuint index, GLenum pname);
GLboolean __glewIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname);
void __glewMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
void __glewMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
void __glewMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
void __glewMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
void __glewClearDepthf(GLclampf d);
void __glewDepthRangef(GLclampf n, GLclampf f);
void __glewGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint* range, GLint *precision);
void __glewReleaseShaderCompiler(void);
void __glewShaderBinary(GLsizei count, const GLuint* shaders, GLenum binaryformat, const GLvoid*binary, GLsizei length);
void __glewDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance);
void __glewDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount, GLuint baseinstance);
void __glewDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount, GLint basevertex, GLuint baseinstance);
void __glewBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
GLint __glewGetFragDataIndex(GLuint program, const GLchar * name);
void __glewClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid* data);
void __glewClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid* data);
void __glewClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid* data);
void __glewClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid* data);
void __glewClampColorARB(GLenum target, GLenum clamp);
void __glewDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
void __glewDispatchComputeIndirect(GLintptr indirect);
void __glewCopyBufferSubData(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size);
void __glewCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
void (*GLDEBUGPROCARB)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, GLvoid* userParam);
void __glewDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
void __glewDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);
GLuint __glewGetDebugMessageLogARB(GLuint count, GLsizei bufsize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
void __glewDrawBuffersARB(GLsizei n, const GLenum* bufs);
void __glewBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
void __glewBlendEquationiARB(GLuint buf, GLenum mode);
void __glewBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void __glewBlendFunciARB(GLuint buf, GLenum src, GLenum dst);
void __glewDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, void* indices, GLint basevertex);
void __glewDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount, GLint basevertex);
void __glewDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, void* indices, GLint basevertex);
void __glewMultiDrawElementsBaseVertex(GLenum mode, GLsizei* count, GLenum type, GLvoid**indices, GLsizei primcount, GLint *basevertex);
void __glewDrawArraysIndirect(GLenum mode, const void* indirect);
void __glewDrawElementsIndirect(GLenum mode, GLenum type, const void* indirect);
void __glewFramebufferParameteri(GLenum target, GLenum pname, GLint param);
void __glewGetFramebufferParameteriv(GLenum target, GLenum pname, GLint* params);
void __glewGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint* params);
void __glewNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param);
void __glewBindFramebuffer(GLenum target, GLuint framebuffer);
void __glewBindRenderbuffer(GLenum target, GLuint renderbuffer);
void __glewBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLenum __glewCheckFramebufferStatus(GLenum target);
void __glewDeleteFramebuffers(GLsizei n, const GLuint* framebuffers);
void __glewDeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers);
void __glewFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void __glewFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void __glewFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void __glewFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer);
void __glewFramebufferTextureLayer(GLenum target,GLenum attachment, GLuint texture,GLint level,GLint layer);
void __glewGenFramebuffers(GLsizei n, GLuint* framebuffers);
void __glewGenRenderbuffers(GLsizei n, GLuint* renderbuffers);
void __glewGenerateMipmap(GLenum target);
void __glewGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint* params);
void __glewGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint* params);
GLboolean __glewIsFramebuffer(GLuint framebuffer);
GLboolean __glewIsRenderbuffer(GLuint renderbuffer);
void __glewRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void __glewRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void __glewFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level);
void __glewFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
void __glewFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
void __glewProgramParameteriARB(GLuint program, GLenum pname, GLint value);
void __glewGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei* length, GLenum *binaryFormat, GLvoid*binary);
void __glewProgramBinary(GLuint program, GLenum binaryFormat, const void* binary, GLsizei length);
void __glewProgramParameteri(GLuint program, GLenum pname, GLint value);
void __glewGetUniformdv(GLuint program, GLint location, GLdouble* params);
void __glewUniform1d(GLint location, GLdouble x);
void __glewUniform1dv(GLint location, GLsizei count, const GLdouble* value);
void __glewUniform2d(GLint location, GLdouble x, GLdouble y);
void __glewUniform2dv(GLint location, GLsizei count, const GLdouble* value);
void __glewUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
void __glewUniform3dv(GLint location, GLsizei count, const GLdouble* value);
void __glewUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void __glewUniform4dv(GLint location, GLsizei count, const GLdouble* value);
void __glewUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
void __glewColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
void __glewColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params);
void __glewColorTableParameteriv(GLenum target, GLenum pname, const GLint *params);
void __glewConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
void __glewConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
void __glewConvolutionParameterf(GLenum target, GLenum pname, GLfloat params);
void __glewConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params);
void __glewConvolutionParameteri(GLenum target, GLenum pname, GLint params);
void __glewConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params);
void __glewCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
void __glewCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void __glewCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void __glewCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
void __glewGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table);
void __glewGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params);
void __glewGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params);
void __glewGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image);
void __glewGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params);
void __glewGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params);
void __glewGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
void __glewGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params);
void __glewGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params);
void __glewGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values);
void __glewGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params);
void __glewGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params);
void __glewGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
void __glewHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
void __glewMinmax(GLenum target, GLenum internalformat, GLboolean sink);
void __glewResetHistogram(GLenum target);
void __glewResetMinmax(GLenum target);
void __glewSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
void __glewDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
void __glewDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount);
void __glewVertexAttribDivisorARB(GLuint index, GLuint divisor);
void __glewGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params);
void __glewGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64* params);
void __glewInvalidateBufferData(GLuint buffer);
void __glewInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length);
void __glewInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum* attachments);
void __glewInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
void __glewInvalidateTexImage(GLuint texture, GLint level);
void __glewInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
void __glewFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
GLvoid * __glewMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
void __glewCurrentPaletteMatrixARB(GLint index);
void __glewMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid *pointer);
void __glewMatrixIndexubvARB(GLint size, GLubyte *indices);
void __glewMatrixIndexuivARB(GLint size, GLuint *indices);
void __glewMatrixIndexusvARB(GLint size, GLushort *indices);
void __glewMultiDrawArraysIndirect(GLenum mode, const void* indirect, GLsizei primcount, GLsizei stride);
void __glewMultiDrawElementsIndirect(GLenum mode, GLenum type, const void* indirect, GLsizei primcount, GLsizei stride);
void __glewSampleCoverageARB(GLclampf value, GLboolean invert);
void __glewActiveTextureARB(GLenum texture);
void __glewClientActiveTextureARB(GLenum texture);
void __glewMultiTexCoord1dARB(GLenum target, GLdouble s);
void __glewMultiTexCoord1dvARB(GLenum target, const GLdouble *v);
void __glewMultiTexCoord1fARB(GLenum target, GLfloat s);
void __glewMultiTexCoord1fvARB(GLenum target, const GLfloat *v);
void __glewMultiTexCoord1iARB(GLenum target, GLint s);
void __glewMultiTexCoord1ivARB(GLenum target, const GLint *v);
void __glewMultiTexCoord1sARB(GLenum target, GLshort s);
void __glewMultiTexCoord1svARB(GLenum target, const GLshort *v);
void __glewMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t);
void __glewMultiTexCoord2dvARB(GLenum target, const GLdouble *v);
void __glewMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t);
void __glewMultiTexCoord2fvARB(GLenum target, const GLfloat *v);
void __glewMultiTexCoord2iARB(GLenum target, GLint s, GLint t);
void __glewMultiTexCoord2ivARB(GLenum target, const GLint *v);
void __glewMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t);
void __glewMultiTexCoord2svARB(GLenum target, const GLshort *v);
void __glewMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r);
void __glewMultiTexCoord3dvARB(GLenum target, const GLdouble *v);
void __glewMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r);
void __glewMultiTexCoord3fvARB(GLenum target, const GLfloat *v);
void __glewMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r);
void __glewMultiTexCoord3ivARB(GLenum target, const GLint *v);
void __glewMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r);
void __glewMultiTexCoord3svARB(GLenum target, const GLshort *v);
void __glewMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void __glewMultiTexCoord4dvARB(GLenum target, const GLdouble *v);
void __glewMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void __glewMultiTexCoord4fvARB(GLenum target, const GLfloat *v);
void __glewMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q);
void __glewMultiTexCoord4ivARB(GLenum target, const GLint *v);
void __glewMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
void __glewMultiTexCoord4svARB(GLenum target, const GLshort *v);
void __glewBeginQueryARB(GLenum target, GLuint id);
void __glewDeleteQueriesARB(GLsizei n, const GLuint* ids);
void __glewEndQueryARB(GLenum target);
void __glewGenQueriesARB(GLsizei n, GLuint* ids);
void __glewGetQueryObjectivARB(GLuint id, GLenum pname, GLint* params);
void __glewGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint* params);
void __glewGetQueryivARB(GLenum target, GLenum pname, GLint* params);
GLboolean __glewIsQueryARB(GLuint id);
void __glewPointParameterfARB(GLenum pname, GLfloat param);
void __glewPointParameterfvARB(GLenum pname, const GLfloat* params);
void __glewGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint* params);
GLuint __glewGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar* name);
GLint __glewGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar* name);
GLint __glewGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar* name);
void __glewGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar *name);
void __glewGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei *length, GLint *params);
void __glewProvokingVertex(GLenum mode);
GLenum __glewGetGraphicsResetStatusARB(void);
void __glewGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table);
void __glewGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void* img);
void __glewGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image);
void __glewGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
void __glewGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v);
void __glewGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v);
void __glewGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint* v);
void __glewGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
void __glewGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat* values);
void __glewGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint* values);
void __glewGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort* values);
void __glewGetnPolygonStippleARB(GLsizei bufSize, GLubyte* pattern);
void __glewGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, GLvoid*column, GLvoid*span);
void __glewGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* img);
void __glewGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble* params);
void __glewGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
void __glewGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint* params);
void __glewGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
void __glewReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
void __glewMinSampleShadingARB(GLclampf value);
void __glewBindSampler(GLuint unit, GLuint sampler);
void __glewDeleteSamplers(GLsizei count, const GLuint * samplers);
void __glewGenSamplers(GLsizei count, GLuint* samplers);
void __glewGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint* params);
void __glewGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint* params);
void __glewGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat* params);
void __glewGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint* params);
GLboolean __glewIsSampler(GLuint sampler);
void __glewSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint* params);
void __glewSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint* params);
void __glewSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
void __glewSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat* params);
void __glewSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
void __glewSamplerParameteriv(GLuint sampler, GLenum pname, const GLint* params);
void __glewActiveShaderProgram(GLuint pipeline, GLuint program);
void __glewBindProgramPipeline(GLuint pipeline);
GLuint __glewCreateShaderProgramv(GLenum type, GLsizei count, const GLchar ** strings);
void __glewDeleteProgramPipelines(GLsizei n, const GLuint* pipelines);
void __glewGenProgramPipelines(GLsizei n, GLuint* pipelines);
void __glewGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar *infoLog);
void __glewGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint* params);
GLboolean __glewIsProgramPipeline(GLuint pipeline);
void __glewProgramUniform1d(GLuint program, GLint location, GLdouble x);
void __glewProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble* value);
void __glewProgramUniform1f(GLuint program, GLint location, GLfloat x);
void __glewProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat* value);
void __glewProgramUniform1i(GLuint program, GLint location, GLint x);
void __glewProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint* value);
void __glewProgramUniform1ui(GLuint program, GLint location, GLuint x);
void __glewProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint* value);
void __glewProgramUniform2d(GLuint program, GLint location, GLdouble x, GLdouble y);
void __glewProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble* value);
void __glewProgramUniform2f(GLuint program, GLint location, GLfloat x, GLfloat y);
void __glewProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat* value);
void __glewProgramUniform2i(GLuint program, GLint location, GLint x, GLint y);
void __glewProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint* value);
void __glewProgramUniform2ui(GLuint program, GLint location, GLuint x, GLuint y);
void __glewProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint* value);
void __glewProgramUniform3d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
void __glewProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble* value);
void __glewProgramUniform3f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z);
void __glewProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat* value);
void __glewProgramUniform3i(GLuint program, GLint location, GLint x, GLint y, GLint z);
void __glewProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint* value);
void __glewProgramUniform3ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z);
void __glewProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint* value);
void __glewProgramUniform4d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void __glewProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble* value);
void __glewProgramUniform4f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void __glewProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat* value);
void __glewProgramUniform4i(GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w);
void __glewProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint* value);
void __glewProgramUniform4ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w);
void __glewProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint* value);
void __glewProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void __glewProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
void __glewValidateProgramPipeline(GLuint pipeline);
void __glewGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint* params);
void __glewBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
void __glewMemoryBarrier(GLbitfield barriers);
void __glewAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj);
void __glewCompileShaderARB(GLhandleARB shaderObj);
GLhandleARB __glewCreateProgramObjectARB(void);
GLhandleARB __glewCreateShaderObjectARB(GLenum shaderType);
void __glewDeleteObjectARB(GLhandleARB obj);
void __glewDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj);
void __glewGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint *size, GLenum *type, GLcharARB *name);
void __glewGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB *obj);
GLhandleARB __glewGetHandleARB(GLenum pname);
void __glewGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB *infoLog);
void __glewGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat* params);
void __glewGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint* params);
void __glewGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB *source);
GLint __glewGetUniformLocationARB(GLhandleARB programObj, const GLcharARB* name);
void __glewGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat* params);
void __glewGetUniformivARB(GLhandleARB programObj, GLint location, GLint* params);
void __glewLinkProgramARB(GLhandleARB programObj);
void __glewShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint *length);
void __glewUniform1fARB(GLint location, GLfloat v0);
void __glewUniform1fvARB(GLint location, GLsizei count, const GLfloat* value);
void __glewUniform1iARB(GLint location, GLint v0);
void __glewUniform1ivARB(GLint location, GLsizei count, const GLint* value);
void __glewUniform2fARB(GLint location, GLfloat v0, GLfloat v1);
void __glewUniform2fvARB(GLint location, GLsizei count, const GLfloat* value);
void __glewUniform2iARB(GLint location, GLint v0, GLint v1);
void __glewUniform2ivARB(GLint location, GLsizei count, const GLint* value);
void __glewUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void __glewUniform3fvARB(GLint location, GLsizei count, const GLfloat* value);
void __glewUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2);
void __glewUniform3ivARB(GLint location, GLsizei count, const GLint* value);
void __glewUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void __glewUniform4fvARB(GLint location, GLsizei count, const GLfloat* value);
void __glewUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void __glewUniform4ivARB(GLint location, GLsizei count, const GLint* value);
void __glewUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewUseProgramObjectARB(GLhandleARB programObj);
void __glewValidateProgramARB(GLhandleARB programObj);
void __glewShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
void __glewGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar *name);
void __glewGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar *name);
void __glewGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values);
void __glewGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint* values);
GLuint __glewGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar* name);
GLint __glewGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar* name);
void __glewGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint* params);
void __glewUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint* indices);
void __glewCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar ** path, const GLint *length);
void __glewDeleteNamedStringARB(GLint namelen, const GLchar* name);
void __glewGetNamedStringARB(GLint namelen, const GLchar* name, GLsizei bufSize, GLint *stringlen, GLchar *string);
void __glewGetNamedStringivARB(GLint namelen, const GLchar* name, GLenum pname, GLint *params);
GLboolean __glewIsNamedStringARB(GLint namelen, const GLchar* name);
void __glewNamedStringARB(GLenum type, GLint namelen, const GLchar* name, GLint stringlen, const GLchar *string);
GLenum __glewClientWaitSync(GLsync GLsync,GLbitfield flags,GLuint64 timeout);
void __glewDeleteSync(GLsync GLsync);
GLsync __glewFenceSync(GLenum condition,GLbitfield flags);
void __glewGetInteger64v(GLenum pname, GLint64* params);
void __glewGetSynciv(GLsync GLsync,GLenum pname,GLsizei bufSize,GLsizei* length, GLint *values);
GLboolean __glewIsSync(GLsync GLsync);
void __glewWaitSync(GLsync GLsync,GLbitfield flags,GLuint64 timeout);
void __glewPatchParameterfv(GLenum pname, const GLfloat* values);
void __glewPatchParameteri(GLenum pname, GLint value);
void __glewTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer);
void __glewTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void __glewTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void __glewCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data);
void __glewCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
void __glewCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data);
void __glewCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
void __glewCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
void __glewCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
void __glewGetCompressedTexImageARB(GLenum target, GLint lod, void* img);
void __glewGetMultisamplefv(GLenum pname, GLuint index, GLfloat* val);
void __glewSampleMaski(GLuint index, GLbitfield mask);
void __glewTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void __glewTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void __glewTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
void __glewTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
void __glewTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
void __glewTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
void __glewTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
void __glewTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
void __glewTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void __glewTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void __glewTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void __glewTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void __glewTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
void __glewGetQueryObjecti64v(GLuint id, GLenum pname, GLint64* params);
void __glewGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64* params);
void __glewQueryCounter(GLuint id, GLenum target);
void __glewBindTransformFeedback(GLenum target, GLuint id);
void __glewDeleteTransformFeedbacks(GLsizei n, const GLuint* ids);
void __glewDrawTransformFeedback(GLenum mode, GLuint id);
void __glewGenTransformFeedbacks(GLsizei n, GLuint* ids);
GLboolean __glewIsTransformFeedback(GLuint id);
void __glewPauseTransformFeedback(void);
void __glewResumeTransformFeedback(void);
void __glewBeginQueryIndexed(GLenum target, GLuint index, GLuint id);
void __glewDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream);
void __glewEndQueryIndexed(GLenum target, GLuint index);
void __glewGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint* params);
void __glewDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei primcount);
void __glewDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei primcount);
void __glewLoadTransposeMatrixdARB(GLdouble m[16]);
void __glewLoadTransposeMatrixfARB(GLfloat m[16]);
void __glewMultTransposeMatrixdARB(GLdouble m[16]);
void __glewMultTransposeMatrixfARB(GLfloat m[16]);
void __glewBindBufferBase(GLenum target, GLuint index, GLuint buffer);
void __glewBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void __glewGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);
void __glewGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
void __glewGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName);
void __glewGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params);
void __glewGetIntegeri_v(GLenum target, GLuint index, GLint* data);
GLuint __glewGetUniformBlockIndex(GLuint program, const GLchar* uniformBlockName);
void __glewGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar** uniformNames, GLuint* uniformIndices);
void __glewUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
void __glewBindVertexArray(GLuint array);
void __glewDeleteVertexArrays(GLsizei n, const GLuint* arrays);
void __glewGenVertexArrays(GLsizei n, GLuint* arrays);
GLboolean __glewIsVertexArray(GLuint array);
void __glewGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble* params);
void __glewVertexAttribL1d(GLuint index, GLdouble x);
void __glewVertexAttribL1dv(GLuint index, const GLdouble* v);
void __glewVertexAttribL2d(GLuint index, GLdouble x, GLdouble y);
void __glewVertexAttribL2dv(GLuint index, const GLdouble* v);
void __glewVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void __glewVertexAttribL3dv(GLuint index, const GLdouble* v);
void __glewVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void __glewVertexAttribL4dv(GLuint index, const GLdouble* v);
void __glewVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
void __glewBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void __glewVertexAttribBinding(GLuint attribindex, GLuint bindingindex);
void __glewVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
void __glewVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void __glewVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void __glewVertexBindingDivisor(GLuint bindingindex, GLuint divisor);
void __glewVertexBlendARB(GLint count);
void __glewWeightPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid *pointer);
void __glewWeightbvARB(GLint size, GLbyte *weights);
void __glewWeightdvARB(GLint size, GLdouble *weights);
void __glewWeightfvARB(GLint size, GLfloat *weights);
void __glewWeightivARB(GLint size, GLint *weights);
void __glewWeightsvARB(GLint size, GLshort *weights);
void __glewWeightubvARB(GLint size, GLubyte *weights);
void __glewWeightuivARB(GLint size, GLuint *weights);
void __glewWeightusvARB(GLint size, GLushort *weights);
void __glewBindBufferARB(GLenum target, GLuint buffer);
void __glewBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid* data, GLenum usage);
void __glewBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid* data);
void __glewDeleteBuffersARB(GLsizei n, const GLuint* buffers);
void __glewGenBuffersARB(GLsizei n, GLuint* buffers);
void __glewGetBufferParameterivARB(GLenum target, GLenum pname, GLint* params);
void __glewGetBufferPointervARB(GLenum target, GLenum pname, GLvoid** params);
void __glewGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid* data);
GLboolean __glewIsBufferARB(GLuint buffer);
GLvoid * __glewMapBufferARB(GLenum target, GLenum access);
GLboolean __glewUnmapBufferARB(GLenum target);
void __glewBindProgramARB(GLenum target, GLuint program);
void __glewDeleteProgramsARB(GLsizei n, const GLuint* programs);
void __glewDisableVertexAttribArrayARB(GLuint index);
void __glewEnableVertexAttribArrayARB(GLuint index);
void __glewGenProgramsARB(GLsizei n, GLuint* programs);
void __glewGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble* params);
void __glewGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat* params);
void __glewGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble* params);
void __glewGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat* params);
void __glewGetProgramStringARB(GLenum target, GLenum pname, void* string);
void __glewGetProgramivARB(GLenum target, GLenum pname, GLint* params);
void __glewGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid** pointer);
void __glewGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble* params);
void __glewGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat* params);
void __glewGetVertexAttribivARB(GLuint index, GLenum pname, GLint* params);
GLboolean __glewIsProgramARB(GLuint program);
void __glewProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void __glewProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble* params);
void __glewProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void __glewProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat* params);
void __glewProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void __glewProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble* params);
void __glewProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void __glewProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat* params);
void __glewProgramStringARB(GLenum target, GLenum format, GLsizei len, const void* string);
void __glewVertexAttrib1dARB(GLuint index, GLdouble x);
void __glewVertexAttrib1dvARB(GLuint index, const GLdouble* v);
void __glewVertexAttrib1fARB(GLuint index, GLfloat x);
void __glewVertexAttrib1fvARB(GLuint index, const GLfloat* v);
void __glewVertexAttrib1sARB(GLuint index, GLshort x);
void __glewVertexAttrib1svARB(GLuint index, const GLshort* v);
void __glewVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y);
void __glewVertexAttrib2dvARB(GLuint index, const GLdouble* v);
void __glewVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y);
void __glewVertexAttrib2fvARB(GLuint index, const GLfloat* v);
void __glewVertexAttrib2sARB(GLuint index, GLshort x, GLshort y);
void __glewVertexAttrib2svARB(GLuint index, const GLshort* v);
void __glewVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void __glewVertexAttrib3dvARB(GLuint index, const GLdouble* v);
void __glewVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void __glewVertexAttrib3fvARB(GLuint index, const GLfloat* v);
void __glewVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z);
void __glewVertexAttrib3svARB(GLuint index, const GLshort* v);
void __glewVertexAttrib4NbvARB(GLuint index, const GLbyte* v);
void __glewVertexAttrib4NivARB(GLuint index, const GLint* v);
void __glewVertexAttrib4NsvARB(GLuint index, const GLshort* v);
void __glewVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void __glewVertexAttrib4NubvARB(GLuint index, const GLubyte* v);
void __glewVertexAttrib4NuivARB(GLuint index, const GLuint* v);
void __glewVertexAttrib4NusvARB(GLuint index, const GLushort* v);
void __glewVertexAttrib4bvARB(GLuint index, const GLbyte* v);
void __glewVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void __glewVertexAttrib4dvARB(GLuint index, const GLdouble* v);
void __glewVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void __glewVertexAttrib4fvARB(GLuint index, const GLfloat* v);
void __glewVertexAttrib4ivARB(GLuint index, const GLint* v);
void __glewVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void __glewVertexAttrib4svARB(GLuint index, const GLshort* v);
void __glewVertexAttrib4ubvARB(GLuint index, const GLubyte* v);
void __glewVertexAttrib4uivARB(GLuint index, const GLuint* v);
void __glewVertexAttrib4usvARB(GLuint index, const GLushort* v);
void __glewVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);
void __glewBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB* name);
void __glewGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint *size, GLenum *type, GLcharARB *name);
GLint __glewGetAttribLocationARB(GLhandleARB programObj, const GLcharARB* name);
void __glewColorP3ui(GLenum type, GLuint color);
void __glewColorP3uiv(GLenum type, const GLuint* color);
void __glewColorP4ui(GLenum type, GLuint color);
void __glewColorP4uiv(GLenum type, const GLuint* color);
void __glewMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords);
void __glewMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint* coords);
void __glewMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords);
void __glewMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint* coords);
void __glewMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords);
void __glewMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint* coords);
void __glewMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords);
void __glewMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint* coords);
void __glewNormalP3ui(GLenum type, GLuint coords);
void __glewNormalP3uiv(GLenum type, const GLuint* coords);
void __glewSecondaryColorP3ui(GLenum type, GLuint color);
void __glewSecondaryColorP3uiv(GLenum type, const GLuint* color);
void __glewTexCoordP1ui(GLenum type, GLuint coords);
void __glewTexCoordP1uiv(GLenum type, const GLuint* coords);
void __glewTexCoordP2ui(GLenum type, GLuint coords);
void __glewTexCoordP2uiv(GLenum type, const GLuint* coords);
void __glewTexCoordP3ui(GLenum type, GLuint coords);
void __glewTexCoordP3uiv(GLenum type, const GLuint* coords);
void __glewTexCoordP4ui(GLenum type, GLuint coords);
void __glewTexCoordP4uiv(GLenum type, const GLuint* coords);
void __glewVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void __glewVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
void __glewVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void __glewVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
void __glewVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void __glewVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
void __glewVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void __glewVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
void __glewVertexP2ui(GLenum type, GLuint value);
void __glewVertexP2uiv(GLenum type, const GLuint* value);
void __glewVertexP3ui(GLenum type, GLuint value);
void __glewVertexP3uiv(GLenum type, const GLuint* value);
void __glewVertexP4ui(GLenum type, GLuint value);
void __glewVertexP4uiv(GLenum type, const GLuint* value);
void __glewDepthRangeArrayv(GLuint first, GLsizei count, const GLclampd * v);
void __glewDepthRangeIndexed(GLuint index, GLclampd n, GLclampd f);
void __glewGetDoublei_v(GLenum target, GLuint index, GLdouble* data);
void __glewGetFloati_v(GLenum target, GLuint index, GLfloat* data);
void __glewScissorArrayv(GLuint first, GLsizei count, const GLint * v);
void __glewScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
void __glewScissorIndexedv(GLuint index, const GLint * v);
void __glewViewportArrayv(GLuint first, GLsizei count, const GLfloat * v);
void __glewViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
void __glewViewportIndexedfv(GLuint index, const GLfloat * v);
void __glewWindowPos2dARB(GLdouble x, GLdouble y);
void __glewWindowPos2dvARB(const GLdouble* p);
void __glewWindowPos2fARB(GLfloat x, GLfloat y);
void __glewWindowPos2fvARB(const GLfloat* p);
void __glewWindowPos2iARB(GLint x, GLint y);
void __glewWindowPos2ivARB(const GLint* p);
void __glewWindowPos2sARB(GLshort x, GLshort y);
void __glewWindowPos2svARB(const GLshort* p);
void __glewWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z);
void __glewWindowPos3dvARB(const GLdouble* p);
void __glewWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z);
void __glewWindowPos3fvARB(const GLfloat* p);
void __glewWindowPos3iARB(GLint x, GLint y, GLint z);
void __glewWindowPos3ivARB(const GLint* p);
void __glewWindowPos3sARB(GLshort x, GLshort y, GLshort z);
void __glewWindowPos3svARB(const GLshort* p);
void __glewDrawBuffersATI(GLsizei n, const GLenum* bufs);
void __glewDrawElementArrayATI(GLenum mode, GLsizei count);
void __glewDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count);
void __glewElementPointerATI(GLenum type, const void* pointer);
void __glewGetTexBumpParameterfvATI(GLenum pname, GLfloat *param);
void __glewGetTexBumpParameterivATI(GLenum pname, GLint *param);
void __glewTexBumpParameterfvATI(GLenum pname, GLfloat *param);
void __glewTexBumpParameterivATI(GLenum pname, GLint *param);
void __glewAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
void __glewAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
void __glewAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
void __glewBeginFragmentShaderATI(void);
void __glewBindFragmentShaderATI(GLuint id);
void __glewColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
void __glewColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
void __glewColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
void __glewDeleteFragmentShaderATI(GLuint id);
void __glewEndFragmentShaderATI(void);
GLuint __glewGenFragmentShadersATI(GLuint range);
void __glewPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle);
void __glewSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle);
void __glewSetFragmentShaderConstantATI(GLuint dst, const GLfloat* value);
GLvoid * __glewMapObjectBufferATI(GLuint buffer);
void __glewUnmapObjectBufferATI(GLuint buffer);
void __glewPNTrianglesfATI(GLenum pname, GLfloat param);
void __glewPNTrianglesiATI(GLenum pname, GLint param);
void __glewStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
void __glewStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
void __glewArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
void __glewFreeObjectBufferATI(GLuint buffer);
void __glewGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat* params);
void __glewGetArrayObjectivATI(GLenum array, GLenum pname, GLint* params);
void __glewGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat* params);
void __glewGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint* params);
void __glewGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat* params);
void __glewGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint* params);
GLboolean __glewIsObjectBufferATI(GLuint buffer);
GLuint __glewNewObjectBufferATI(GLsizei size, const void* pointer, GLenum usage);
void __glewUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void* pointer, GLenum preserve);
void __glewVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
void __glewGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat* params);
void __glewGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint* params);
void __glewVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
void __glewClientActiveVertexStreamATI(GLenum stream);
void __glewNormalStream3bATI(GLenum stream, GLbyte x, GLbyte y, GLbyte z);
void __glewNormalStream3bvATI(GLenum stream, const GLbyte *coords);
void __glewNormalStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z);
void __glewNormalStream3dvATI(GLenum stream, const GLdouble *coords);
void __glewNormalStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z);
void __glewNormalStream3fvATI(GLenum stream, const GLfloat *coords);
void __glewNormalStream3iATI(GLenum stream, GLint x, GLint y, GLint z);
void __glewNormalStream3ivATI(GLenum stream, const GLint *coords);
void __glewNormalStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z);
void __glewNormalStream3svATI(GLenum stream, const GLshort *coords);
void __glewVertexBlendEnvfATI(GLenum pname, GLfloat param);
void __glewVertexBlendEnviATI(GLenum pname, GLint param);
void __glewVertexStream1dATI(GLenum stream, GLdouble x);
void __glewVertexStream1dvATI(GLenum stream, const GLdouble *coords);
void __glewVertexStream1fATI(GLenum stream, GLfloat x);
void __glewVertexStream1fvATI(GLenum stream, const GLfloat *coords);
void __glewVertexStream1iATI(GLenum stream, GLint x);
void __glewVertexStream1ivATI(GLenum stream, const GLint *coords);
void __glewVertexStream1sATI(GLenum stream, GLshort x);
void __glewVertexStream1svATI(GLenum stream, const GLshort *coords);
void __glewVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y);
void __glewVertexStream2dvATI(GLenum stream, const GLdouble *coords);
void __glewVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y);
void __glewVertexStream2fvATI(GLenum stream, const GLfloat *coords);
void __glewVertexStream2iATI(GLenum stream, GLint x, GLint y);
void __glewVertexStream2ivATI(GLenum stream, const GLint *coords);
void __glewVertexStream2sATI(GLenum stream, GLshort x, GLshort y);
void __glewVertexStream2svATI(GLenum stream, const GLshort *coords);
void __glewVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z);
void __glewVertexStream3dvATI(GLenum stream, const GLdouble *coords);
void __glewVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z);
void __glewVertexStream3fvATI(GLenum stream, const GLfloat *coords);
void __glewVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z);
void __glewVertexStream3ivATI(GLenum stream, const GLint *coords);
void __glewVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z);
void __glewVertexStream3svATI(GLenum stream, const GLshort *coords);
void __glewVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void __glewVertexStream4dvATI(GLenum stream, const GLdouble *coords);
void __glewVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void __glewVertexStream4fvATI(GLenum stream, const GLfloat *coords);
void __glewVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w);
void __glewVertexStream4ivATI(GLenum stream, const GLint *coords);
void __glewVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
void __glewVertexStream4svATI(GLenum stream, const GLshort *coords);
GLint __glewGetUniformBufferSizeEXT(GLuint program, GLint location);
GLintptr __glewGetUniformOffsetEXT(GLuint program, GLint location);
void __glewUniformBufferEXT(GLuint program, GLint location, GLuint buffer);
void __glewBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void __glewBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha);
void __glewBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
void __glewBlendEquationEXT(GLenum mode);
void __glewColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void* data);
void __glewCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
void __glewLockArraysEXT(GLint first, GLsizei count);
void __glewUnlockArraysEXT(void);
void __glewConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* image);
void __glewConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* image);
void __glewConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat param);
void __glewConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat* params);
void __glewConvolutionParameteriEXT(GLenum target, GLenum pname, GLint param);
void __glewConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint* params);
void __glewCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void __glewCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
void __glewGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void* image);
void __glewGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat* params);
void __glewGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint* params);
void __glewGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void* row, void* column, void* span);
void __glewSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* row, const void* column);
void __glewBinormalPointerEXT(GLenum type, GLsizei stride, void* pointer);
void __glewTangentPointerEXT(GLenum type, GLsizei stride, void* pointer);
void __glewCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
void __glewCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void __glewCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void __glewCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void __glewCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void __glewCullParameterdvEXT(GLenum pname, GLdouble* params);
void __glewCullParameterfvEXT(GLenum pname, GLfloat* params);
void __glewInsertEventMarkerEXT(GLsizei length, const GLchar* marker);
void __glewPopGroupMarkerEXT(void);
void __glewPushGroupMarkerEXT(GLsizei length, const GLchar* marker);
void __glewDepthBoundsEXT(GLclampd zmin, GLclampd zmax);
void __glewBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture);
GLenum __glewCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target);
void __glewClientAttribDefaultEXT(GLbitfield mask);
void __glewCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data);
void __glewCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
void __glewCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data);
void __glewCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
void __glewCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
void __glewCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
void __glewCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data);
void __glewCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
void __glewCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data);
void __glewCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
void __glewCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
void __glewCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
void __glewCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
void __glewCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void __glewCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void __glewCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void __glewCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void __glewCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
void __glewCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void __glewCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void __glewCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void __glewCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void __glewDisableClientStateIndexedEXT(GLenum array, GLuint index);
void __glewDisableClientStateiEXT(GLenum array, GLuint index);
void __glewDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index);
void __glewDisableVertexArrayEXT(GLuint vaobj, GLenum array);
void __glewEnableClientStateIndexedEXT(GLenum array, GLuint index);
void __glewEnableClientStateiEXT(GLenum array, GLuint index);
void __glewEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index);
void __glewEnableVertexArrayEXT(GLuint vaobj, GLenum array);
void __glewFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length);
void __glewFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode);
void __glewFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum* bufs);
void __glewFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode);
void __glewGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target);
void __glewGenerateTextureMipmapEXT(GLuint texture, GLenum target);
void __glewGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, void* img);
void __glewGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint level, void* img);
void __glewGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble* params);
void __glewGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble* params);
void __glewGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat* params);
void __glewGetFloati_vEXT(GLenum pname, GLuint index, GLfloat* params);
void __glewGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint* param);
void __glewGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat* params);
void __glewGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint* params);
void __glewGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble* params);
void __glewGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat* params);
void __glewGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint* params);
void __glewGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
void __glewGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat* params);
void __glewGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint* params);
void __glewGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint* params);
void __glewGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint* params);
void __glewGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat* params);
void __glewGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint* params);
void __glewGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint* params);
void __glewGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void** params);
void __glewGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
void __glewGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
void __glewGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint* params);
void __glewGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint* params);
void __glewGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble* params);
void __glewGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat* params);
void __glewGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void* string);
void __glewGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint* params);
void __glewGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint* params);
void __glewGetPointerIndexedvEXT(GLenum target, GLuint index, GLvoid** params);
void __glewGetPointeri_vEXT(GLenum pname, GLuint index, GLvoid** params);
void __glewGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
void __glewGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat* params);
void __glewGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint* params);
void __glewGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint* params);
void __glewGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint* params);
void __glewGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat* params);
void __glewGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint* params);
void __glewGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint* param);
void __glewGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint* param);
void __glewGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLvoid** param);
void __glewGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, GLvoid** param);
GLvoid * __glewMapNamedBufferEXT(GLuint buffer, GLenum access);
GLvoid * __glewMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
void __glewMatrixFrustumEXT(GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f);
void __glewMatrixLoadIdentityEXT(GLenum matrixMode);
void __glewMatrixLoadTransposedEXT(GLenum matrixMode, const GLdouble* m);
void __glewMatrixLoadTransposefEXT(GLenum matrixMode, const GLfloat* m);
void __glewMatrixLoaddEXT(GLenum matrixMode, const GLdouble* m);
void __glewMatrixLoadfEXT(GLenum matrixMode, const GLfloat* m);
void __glewMatrixMultTransposedEXT(GLenum matrixMode, const GLdouble* m);
void __glewMatrixMultTransposefEXT(GLenum matrixMode, const GLfloat* m);
void __glewMatrixMultdEXT(GLenum matrixMode, const GLdouble* m);
void __glewMatrixMultfEXT(GLenum matrixMode, const GLfloat* m);
void __glewMatrixOrthoEXT(GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f);
void __glewMatrixPopEXT(GLenum matrixMode);
void __glewMatrixPushEXT(GLenum matrixMode);
void __glewMatrixRotatedEXT(GLenum matrixMode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void __glewMatrixRotatefEXT(GLenum matrixMode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void __glewMatrixScaledEXT(GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z);
void __glewMatrixScalefEXT(GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z);
void __glewMatrixTranslatedEXT(GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z);
void __glewMatrixTranslatefEXT(GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z);
void __glewMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
void __glewMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void* pointer);
void __glewMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
void __glewMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat* params);
void __glewMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param);
void __glewMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint* params);
void __glewMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
void __glewMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble* params);
void __glewMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
void __glewMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat* params);
void __glewMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param);
void __glewMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint* params);
void __glewMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
void __glewMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
void __glewMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
void __glewMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint* params);
void __glewMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint* params);
void __glewMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
void __glewMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat* param);
void __glewMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param);
void __glewMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint* param);
void __glewMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer);
void __glewMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
void __glewMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
void __glewMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
void __glewNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage);
void __glewNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data);
void __glewNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void __glewNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void __glewNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void __glewNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void __glewNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
void __glewNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
void __glewNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
void __glewNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
void __glewNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void __glewNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble* params);
void __glewNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void __glewNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat* params);
void __glewNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
void __glewNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint* params);
void __glewNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void __glewNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint* params);
void __glewNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat* params);
void __glewNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint* params);
void __glewNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint* params);
void __glewNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void* string);
void __glewNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
void __glewNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
void __glewNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void __glewProgramUniform1dEXT(GLuint program, GLint location, GLdouble x);
void __glewProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void __glewProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0);
void __glewProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat* value);
void __glewProgramUniform1iEXT(GLuint program, GLint location, GLint v0);
void __glewProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint* value);
void __glewProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0);
void __glewProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint* value);
void __glewProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y);
void __glewProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void __glewProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1);
void __glewProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat* value);
void __glewProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1);
void __glewProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint* value);
void __glewProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1);
void __glewProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint* value);
void __glewProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
void __glewProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void __glewProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void __glewProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat* value);
void __glewProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
void __glewProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint* value);
void __glewProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
void __glewProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint* value);
void __glewProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void __glewProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void __glewProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void __glewProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat* value);
void __glewProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void __glewProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint* value);
void __glewProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void __glewProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint* value);
void __glewProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void __glewProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void __glewProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void __glewProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void __glewProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void __glewProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void __glewProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void __glewProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void __glewProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void __glewProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void __glewPushClientAttribDefaultEXT(GLbitfield mask);
void __glewTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
void __glewTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
void __glewTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
void __glewTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
void __glewTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint* params);
void __glewTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint* params);
void __glewTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param);
void __glewTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat* param);
void __glewTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param);
void __glewTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint* param);
void __glewTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer);
void __glewTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
void __glewTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
void __glewTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
GLboolean __glewUnmapNamedBufferEXT(GLuint buffer);
void __glewVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void __glewVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
void __glewVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
void __glewVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
void __glewVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void __glewVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
void __glewVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void __glewVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void __glewVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void __glewVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
void __glewVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void __glewColorMaskIndexedEXT(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
void __glewDisableIndexedEXT(GLenum target, GLuint index);
void __glewEnableIndexedEXT(GLenum target, GLuint index);
void __glewGetBooleanIndexedvEXT(GLenum value, GLuint index, GLboolean* data);
void __glewGetIntegerIndexedvEXT(GLenum value, GLuint index, GLint* data);
GLboolean __glewIsEnabledIndexedEXT(GLenum target, GLuint index);
void __glewDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount);
void __glewDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
void __glewDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
void __glewFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer);
void __glewFogCoorddEXT(GLdouble coord);
void __glewFogCoorddvEXT(const GLdouble *coord);
void __glewFogCoordfEXT(GLfloat coord);
void __glewFogCoordfvEXT(const GLfloat *coord);
void __glewFragmentColorMaterialEXT(GLenum face, GLenum mode);
void __glewFragmentLightModelfEXT(GLenum pname, GLfloat param);
void __glewFragmentLightModelfvEXT(GLenum pname, GLfloat* params);
void __glewFragmentLightModeliEXT(GLenum pname, GLint param);
void __glewFragmentLightModelivEXT(GLenum pname, GLint* params);
void __glewFragmentLightfEXT(GLenum light, GLenum pname, GLfloat param);
void __glewFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat* params);
void __glewFragmentLightiEXT(GLenum light, GLenum pname, GLint param);
void __glewFragmentLightivEXT(GLenum light, GLenum pname, GLint* params);
void __glewFragmentMaterialfEXT(GLenum face, GLenum pname, const GLfloat param);
void __glewFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat* params);
void __glewFragmentMaterialiEXT(GLenum face, GLenum pname, const GLint param);
void __glewFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint* params);
void __glewGetFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat* params);
void __glewGetFragmentLightivEXT(GLenum light, GLenum pname, GLint* params);
void __glewGetFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat* params);
void __glewGetFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint* params);
void __glewLightEnviEXT(GLenum pname, GLint param);
void __glewBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
void __glewRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void __glewBindFramebufferEXT(GLenum target, GLuint framebuffer);
void __glewBindRenderbufferEXT(GLenum target, GLuint renderbuffer);
GLenum __glewCheckFramebufferStatusEXT(GLenum target);
void __glewDeleteFramebuffersEXT(GLsizei n, const GLuint* framebuffers);
void __glewDeleteRenderbuffersEXT(GLsizei n, const GLuint* renderbuffers);
void __glewFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void __glewFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void __glewFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void __glewFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
void __glewGenFramebuffersEXT(GLsizei n, GLuint* framebuffers);
void __glewGenRenderbuffersEXT(GLsizei n, GLuint* renderbuffers);
void __glewGenerateMipmapEXT(GLenum target);
void __glewGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint* params);
void __glewGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint* params);
GLboolean __glewIsFramebufferEXT(GLuint framebuffer);
GLboolean __glewIsRenderbufferEXT(GLuint renderbuffer);
void __glewRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void __glewFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level);
void __glewFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
void __glewProgramParameteriEXT(GLuint program, GLenum pname, GLint value);
void __glewProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat* params);
void __glewProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat* params);
void __glewBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name);
GLint __glewGetFragDataLocationEXT(GLuint program, const GLchar *name);
void __glewGetUniformuivEXT(GLuint program, GLint location, GLuint *params);
void __glewGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params);
void __glewGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params);
void __glewUniform1uiEXT(GLint location, GLuint v0);
void __glewUniform1uivEXT(GLint location, GLsizei count, const GLuint *value);
void __glewUniform2uiEXT(GLint location, GLuint v0, GLuint v1);
void __glewUniform2uivEXT(GLint location, GLsizei count, const GLuint *value);
void __glewUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2);
void __glewUniform3uivEXT(GLint location, GLsizei count, const GLuint *value);
void __glewUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void __glewUniform4uivEXT(GLint location, GLsizei count, const GLuint *value);
void __glewVertexAttribI1iEXT(GLuint index, GLint x);
void __glewVertexAttribI1ivEXT(GLuint index, const GLint *v);
void __glewVertexAttribI1uiEXT(GLuint index, GLuint x);
void __glewVertexAttribI1uivEXT(GLuint index, const GLuint *v);
void __glewVertexAttribI2iEXT(GLuint index, GLint x, GLint y);
void __glewVertexAttribI2ivEXT(GLuint index, const GLint *v);
void __glewVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y);
void __glewVertexAttribI2uivEXT(GLuint index, const GLuint *v);
void __glewVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z);
void __glewVertexAttribI3ivEXT(GLuint index, const GLint *v);
void __glewVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z);
void __glewVertexAttribI3uivEXT(GLuint index, const GLuint *v);
void __glewVertexAttribI4bvEXT(GLuint index, const GLbyte *v);
void __glewVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w);
void __glewVertexAttribI4ivEXT(GLuint index, const GLint *v);
void __glewVertexAttribI4svEXT(GLuint index, const GLshort *v);
void __glewVertexAttribI4ubvEXT(GLuint index, const GLubyte *v);
void __glewVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void __glewVertexAttribI4uivEXT(GLuint index, const GLuint *v);
void __glewVertexAttribI4usvEXT(GLuint index, const GLushort *v);
void __glewVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void __glewGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
void __glewGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat* params);
void __glewGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint* params);
void __glewGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
void __glewGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat* params);
void __glewGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint* params);
void __glewHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
void __glewMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink);
void __glewResetHistogramEXT(GLenum target);
void __glewResetMinmaxEXT(GLenum target);
void __glewIndexFuncEXT(GLenum func, GLfloat ref);
void __glewIndexMaterialEXT(GLenum face, GLenum mode);
void __glewApplyTextureEXT(GLenum mode);
void __glewTextureLightEXT(GLenum pname);
void __glewTextureMaterialEXT(GLenum face, GLenum mode);
void __glewMultiDrawArraysEXT(GLenum mode, const GLint* first, const GLsizei *count, GLsizei primcount);
void __glewMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid **indices, GLsizei primcount);
void __glewSampleMaskEXT(GLclampf value, GLboolean invert);
void __glewSamplePatternEXT(GLenum pattern);
void __glewColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void* data);
void __glewGetColorTableEXT(GLenum target, GLenum format, GLenum type, void* data);
void __glewGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat* params);
void __glewGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint* params);
void __glewGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat* params);
void __glewGetPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint* params);
void __glewPixelTransformParameterfEXT(GLenum target, GLenum pname, const GLfloat param);
void __glewPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat* params);
void __glewPixelTransformParameteriEXT(GLenum target, GLenum pname, const GLint param);
void __glewPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint* params);
void __glewPointParameterfEXT(GLenum pname, GLfloat param);
void __glewPointParameterfvEXT(GLenum pname, const GLfloat* params);
void __glewPolygonOffsetEXT(GLfloat factor, GLfloat bias);
void __glewProvokingVertexEXT(GLenum mode);
void __glewBeginSceneEXT(void);
void __glewEndSceneEXT(void);
void __glewSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue);
void __glewSecondaryColor3bvEXT(const GLbyte *v);
void __glewSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue);
void __glewSecondaryColor3dvEXT(const GLdouble *v);
void __glewSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue);
void __glewSecondaryColor3fvEXT(const GLfloat *v);
void __glewSecondaryColor3iEXT(GLint red, GLint green, GLint blue);
void __glewSecondaryColor3ivEXT(const GLint *v);
void __glewSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue);
void __glewSecondaryColor3svEXT(const GLshort *v);
void __glewSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue);
void __glewSecondaryColor3ubvEXT(const GLubyte *v);
void __glewSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue);
void __glewSecondaryColor3uivEXT(const GLuint *v);
void __glewSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue);
void __glewSecondaryColor3usvEXT(const GLushort *v);
void __glewSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void __glewActiveProgramEXT(GLuint program);
GLuint __glewCreateShaderProgramEXT(GLenum type, const GLchar* string);
void __glewUseShaderProgramEXT(GLenum type, GLuint program);
void __glewBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
void __glewMemoryBarrierEXT(GLbitfield barriers);
void __glewActiveStencilFaceEXT(GLenum face);
void __glewTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
void __glewTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
void __glewTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
void __glewTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
void __glewFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
void __glewTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer);
void __glewClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha);
void __glewClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha);
void __glewGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params);
void __glewGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params);
void __glewTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params);
void __glewTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params);
GLboolean __glewAreTexturesResidentEXT(GLsizei n, const GLuint* textures, GLboolean* residences);
void __glewBindTextureEXT(GLenum target, GLuint texture);
void __glewDeleteTexturesEXT(GLsizei n, const GLuint* textures);
void __glewGenTexturesEXT(GLsizei n, GLuint* textures);
GLboolean __glewIsTextureEXT(GLuint texture);
void __glewPrioritizeTexturesEXT(GLsizei n, const GLuint* textures, const GLclampf* priorities);
void __glewTextureNormalEXT(GLenum mode);
void __glewGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT *params);
void __glewGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT *params);
void __glewBeginTransformFeedbackEXT(GLenum primitiveMode);
void __glewBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer);
void __glewBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
void __glewBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void __glewEndTransformFeedbackEXT(void);
void __glewGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei *size, GLenum *type, GLchar *name);
void __glewTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar ** varyings, GLenum bufferMode);
void __glewArrayElementEXT(GLint i);
void __glewColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer);
void __glewDrawArraysEXT(GLenum mode, GLint first, GLsizei count);
void __glewEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean* pointer);
void __glewIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void* pointer);
void __glewNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void* pointer);
void __glewTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer);
void __glewVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer);
void __glewGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble* params);
void __glewVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void __glewVertexAttribL1dEXT(GLuint index, GLdouble x);
void __glewVertexAttribL1dvEXT(GLuint index, const GLdouble* v);
void __glewVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y);
void __glewVertexAttribL2dvEXT(GLuint index, const GLdouble* v);
void __glewVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void __glewVertexAttribL3dvEXT(GLuint index, const GLdouble* v);
void __glewVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void __glewVertexAttribL4dvEXT(GLuint index, const GLdouble* v);
void __glewVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
void __glewBeginVertexShaderEXT(void);
GLuint __glewBindLightParameterEXT(GLenum light, GLenum value);
GLuint __glewBindMaterialParameterEXT(GLenum face, GLenum value);
GLuint __glewBindParameterEXT(GLenum value);
GLuint __glewBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value);
GLuint __glewBindTextureUnitParameterEXT(GLenum unit, GLenum value);
void __glewBindVertexShaderEXT(GLuint id);
void __glewDeleteVertexShaderEXT(GLuint id);
void __glewDisableVariantClientStateEXT(GLuint id);
void __glewEnableVariantClientStateEXT(GLuint id);
void __glewEndVertexShaderEXT(void);
void __glewExtractComponentEXT(GLuint res, GLuint src, GLuint num);
GLuint __glewGenSymbolsEXT(GLenum dataType, GLenum storageType, GLenum range, GLuint components);
GLuint __glewGenVertexShadersEXT(GLuint range);
void __glewGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data);
void __glewGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data);
void __glewGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data);
void __glewGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data);
void __glewGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data);
void __glewGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data);
void __glewGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data);
void __glewGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data);
void __glewGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data);
void __glewGetVariantPointervEXT(GLuint id, GLenum value, GLvoid **data);
void __glewInsertComponentEXT(GLuint res, GLuint src, GLuint num);
GLboolean __glewIsVariantEnabledEXT(GLuint id, GLenum cap);
void __glewSetInvariantEXT(GLuint id, GLenum type, GLvoid *addr);
void __glewSetLocalConstantEXT(GLuint id, GLenum type, GLvoid *addr);
void __glewShaderOp1EXT(GLenum op, GLuint res, GLuint arg1);
void __glewShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
void __glewShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
void __glewSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
void __glewVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid *addr);
void __glewVariantbvEXT(GLuint id, GLbyte *addr);
void __glewVariantdvEXT(GLuint id, GLdouble *addr);
void __glewVariantfvEXT(GLuint id, GLfloat *addr);
void __glewVariantivEXT(GLuint id, GLint *addr);
void __glewVariantsvEXT(GLuint id, GLshort *addr);
void __glewVariantubvEXT(GLuint id, GLubyte *addr);
void __glewVariantuivEXT(GLuint id, GLuint *addr);
void __glewVariantusvEXT(GLuint id, GLushort *addr);
void __glewWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
void __glewVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, void* pointer);
void __glewVertexWeightfEXT(GLfloat weight);
void __glewVertexWeightfvEXT(GLfloat* weight);
GLsync __glewImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);
void __glewFrameTerminatorGREMEDY(void);
void __glewStringMarkerGREMEDY(GLsizei len, const void* string);
void __glewGetImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat* params);
void __glewGetImageTransformParameterivHP(GLenum target, GLenum pname, const GLint* params);
void __glewImageTransformParameterfHP(GLenum target, GLenum pname, const GLfloat param);
void __glewImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat* params);
void __glewImageTransformParameteriHP(GLenum target, GLenum pname, const GLint param);
void __glewImageTransformParameterivHP(GLenum target, GLenum pname, const GLint* params);
void __glewMultiModeDrawArraysIBM(const GLenum* mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
void __glewMultiModeDrawElementsIBM(const GLenum* mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride);
void __glewColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
void __glewEdgeFlagPointerListIBM(GLint stride, const GLboolean ** pointer, GLint ptrstride);
void __glewFogCoordPointerListIBM(GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
void __glewIndexPointerListIBM(GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
void __glewNormalPointerListIBM(GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
void __glewSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
void __glewTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
void __glewVertexPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
void __glewColorPointervINTEL(GLint size, GLenum type, const void** pointer);
void __glewNormalPointervINTEL(GLenum type, const void** pointer);
void __glewTexCoordPointervINTEL(GLint size, GLenum type, const void** pointer);
void __glewVertexPointervINTEL(GLint size, GLenum type, const void** pointer);
void __glewTexScissorFuncINTEL(GLenum target, GLenum lfunc, GLenum hfunc);
void __glewTexScissorINTEL(GLenum target, GLclampf tlow, GLclampf thigh);
void __glewDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
void __glewDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);
GLuint __glewGetDebugMessageLog(GLuint count, GLsizei bufsize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
void __glewGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar *label);
void __glewGetObjectPtrLabel(void* ptr, GLsizei bufSize, GLsizei* length, GLchar *label);
void __glewGetPointerv(GLenum pname, void** params);
void __glewObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar* label);
void __glewObjectPtrLabel(void* ptr, GLsizei length, const GLchar* label);
void __glewPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar * message);
GLuint __glewBufferRegionEnabled(void);
void __glewDeleteBufferRegion(GLenum region);
void __glewDrawBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest);
GLuint __glewNewBufferRegion(GLenum region);
void __glewReadBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height);
void __glewResizeBuffersMESA(void);
void __glewWindowPos2dMESA(GLdouble x, GLdouble y);
void __glewWindowPos2dvMESA(const GLdouble* p);
void __glewWindowPos2fMESA(GLfloat x, GLfloat y);
void __glewWindowPos2fvMESA(const GLfloat* p);
void __glewWindowPos2iMESA(GLint x, GLint y);
void __glewWindowPos2ivMESA(const GLint* p);
void __glewWindowPos2sMESA(GLshort x, GLshort y);
void __glewWindowPos2svMESA(const GLshort* p);
void __glewWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z);
void __glewWindowPos3dvMESA(const GLdouble* p);
void __glewWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z);
void __glewWindowPos3fvMESA(const GLfloat* p);
void __glewWindowPos3iMESA(GLint x, GLint y, GLint z);
void __glewWindowPos3ivMESA(const GLint* p);
void __glewWindowPos3sMESA(GLshort x, GLshort y, GLshort z);
void __glewWindowPos3svMESA(const GLshort* p);
void __glewWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble);
void __glewWindowPos4dvMESA(const GLdouble* p);
void __glewWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void __glewWindowPos4fvMESA(const GLfloat* p);
void __glewWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w);
void __glewWindowPos4ivMESA(const GLint* p);
void __glewWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w);
void __glewWindowPos4svMESA(const GLshort* p);
GLuint64 __glewGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
GLuint64 __glewGetTextureHandleNV(GLuint texture);
GLuint64 __glewGetTextureSamplerHandleNV(GLuint texture, GLuint sampler);
GLboolean __glewIsImageHandleResidentNV(GLuint64 handle);
GLboolean __glewIsTextureHandleResidentNV(GLuint64 handle);
void __glewMakeImageHandleNonResidentNV(GLuint64 handle);
void __glewMakeImageHandleResidentNV(GLuint64 handle, GLenum access);
void __glewMakeTextureHandleNonResidentNV(GLuint64 handle);
void __glewMakeTextureHandleResidentNV(GLuint64 handle);
void __glewProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value);
void __glewProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64* values);
void __glewUniformHandleui64NV(GLint location, GLuint64 value);
void __glewUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64* value);
void __glewBeginConditionalRenderNV(GLuint id, GLenum mode);
void __glewEndConditionalRenderNV(void);
void __glewCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
void __glewClearDepthdNV(GLdouble depth);
void __glewDepthBoundsdNV(GLdouble zmin, GLdouble zmax);
void __glewDepthRangedNV(GLdouble zNear, GLdouble zFar);
void __glewEvalMapsNV(GLenum target, GLenum mode);
void __glewGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* params);
void __glewGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint* params);
void __glewGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void* points);
void __glewGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat* params);
void __glewGetMapParameterivNV(GLenum target, GLenum pname, GLint* params);
void __glewMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void* points);
void __glewMapParameterfvNV(GLenum target, GLenum pname, const GLfloat* params);
void __glewMapParameterivNV(GLenum target, GLenum pname, const GLint* params);
void __glewGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat* val);
void __glewSampleMaskIndexedNV(GLuint index, GLbitfield mask);
void __glewTexRenderbufferNV(GLenum target, GLuint renderbuffer);
void __glewDeleteFencesNV(GLsizei n, const GLuint* fences);
void __glewFinishFenceNV(GLuint fence);
void __glewGenFencesNV(GLsizei n, GLuint* fences);
void __glewGetFenceivNV(GLuint fence, GLenum pname, GLint* params);
GLboolean __glewIsFenceNV(GLuint fence);
void __glewSetFenceNV(GLuint fence, GLenum condition);
GLboolean __glewTestFenceNV(GLuint fence);
void __glewGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte* name, GLdouble *params);
void __glewGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte* name, GLfloat *params);
void __glewProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void __glewProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte* name, const GLdouble v[]);
void __glewProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void __glewProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte* name, const GLfloat v[]);
void __glewRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
void __glewProgramVertexLimitNV(GLenum target, GLint limit);
void __glewProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
void __glewProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params);
void __glewProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void __glewProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params);
void __glewProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params);
void __glewProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params);
void __glewProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
void __glewProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params);
void __glewProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void __glewProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params);
void __glewProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params);
void __glewProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params);
void __glewGetUniformi64vNV(GLuint program, GLint location, GLint64EXT* params);
void __glewGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT* params);
void __glewProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x);
void __glewProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
void __glewProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x);
void __glewProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
void __glewProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
void __glewProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
void __glewProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
void __glewProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
void __glewProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
void __glewProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
void __glewProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
void __glewProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
void __glewProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
void __glewProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
void __glewProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
void __glewProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
void __glewUniform1i64NV(GLint location, GLint64EXT x);
void __glewUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT* value);
void __glewUniform1ui64NV(GLint location, GLuint64EXT x);
void __glewUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT* value);
void __glewUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y);
void __glewUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT* value);
void __glewUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y);
void __glewUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT* value);
void __glewUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
void __glewUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT* value);
void __glewUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
void __glewUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT* value);
void __glewUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
void __glewUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT* value);
void __glewUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
void __glewUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT* value);
void __glewColor3hNV(GLhalf red, GLhalf green, GLhalf blue);
void __glewColor3hvNV(const GLhalf* v);
void __glewColor4hNV(GLhalf red, GLhalf green, GLhalf blue, GLhalf alpha);
void __glewColor4hvNV(const GLhalf* v);
void __glewFogCoordhNV(GLhalf fog);
void __glewFogCoordhvNV(const GLhalf* fog);
void __glewMultiTexCoord1hNV(GLenum target, GLhalf s);
void __glewMultiTexCoord1hvNV(GLenum target, const GLhalf* v);
void __glewMultiTexCoord2hNV(GLenum target, GLhalf s, GLhalf t);
void __glewMultiTexCoord2hvNV(GLenum target, const GLhalf* v);
void __glewMultiTexCoord3hNV(GLenum target, GLhalf s, GLhalf t, GLhalf r);
void __glewMultiTexCoord3hvNV(GLenum target, const GLhalf* v);
void __glewMultiTexCoord4hNV(GLenum target, GLhalf s, GLhalf t, GLhalf r, GLhalf q);
void __glewMultiTexCoord4hvNV(GLenum target, const GLhalf* v);
void __glewNormal3hNV(GLhalf nx, GLhalf ny, GLhalf nz);
void __glewNormal3hvNV(const GLhalf* v);
void __glewSecondaryColor3hNV(GLhalf red, GLhalf green, GLhalf blue);
void __glewSecondaryColor3hvNV(const GLhalf* v);
void __glewTexCoord1hNV(GLhalf s);
void __glewTexCoord1hvNV(const GLhalf* v);
void __glewTexCoord2hNV(GLhalf s, GLhalf t);
void __glewTexCoord2hvNV(const GLhalf* v);
void __glewTexCoord3hNV(GLhalf s, GLhalf t, GLhalf r);
void __glewTexCoord3hvNV(const GLhalf* v);
void __glewTexCoord4hNV(GLhalf s, GLhalf t, GLhalf r, GLhalf q);
void __glewTexCoord4hvNV(const GLhalf* v);
void __glewVertex2hNV(GLhalf x, GLhalf y);
void __glewVertex2hvNV(const GLhalf* v);
void __glewVertex3hNV(GLhalf x, GLhalf y, GLhalf z);
void __glewVertex3hvNV(const GLhalf* v);
void __glewVertex4hNV(GLhalf x, GLhalf y, GLhalf z, GLhalf w);
void __glewVertex4hvNV(const GLhalf* v);
void __glewVertexAttrib1hNV(GLuint index, GLhalf x);
void __glewVertexAttrib1hvNV(GLuint index, const GLhalf* v);
void __glewVertexAttrib2hNV(GLuint index, GLhalf x, GLhalf y);
void __glewVertexAttrib2hvNV(GLuint index, const GLhalf* v);
void __glewVertexAttrib3hNV(GLuint index, GLhalf x, GLhalf y, GLhalf z);
void __glewVertexAttrib3hvNV(GLuint index, const GLhalf* v);
void __glewVertexAttrib4hNV(GLuint index, GLhalf x, GLhalf y, GLhalf z, GLhalf w);
void __glewVertexAttrib4hvNV(GLuint index, const GLhalf* v);
void __glewVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalf* v);
void __glewVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalf* v);
void __glewVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalf* v);
void __glewVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalf* v);
void __glewVertexWeighthNV(GLhalf weight);
void __glewVertexWeighthvNV(const GLhalf* weight);
void __glewBeginOcclusionQueryNV(GLuint id);
void __glewDeleteOcclusionQueriesNV(GLsizei n, const GLuint* ids);
void __glewEndOcclusionQueryNV(void);
void __glewGenOcclusionQueriesNV(GLsizei n, GLuint* ids);
void __glewGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint* params);
void __glewGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint* params);
GLboolean __glewIsOcclusionQueryNV(GLuint id);
void __glewProgramBufferParametersIivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params);
void __glewProgramBufferParametersIuivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params);
void __glewProgramBufferParametersfvNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params);
void __glewCopyPathNV(GLuint resultPath, GLuint srcPath);
void __glewCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
void __glewCoverFillPathNV(GLuint path, GLenum coverMode);
void __glewCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
void __glewCoverStrokePathNV(GLuint name, GLenum coverMode);
void __glewDeletePathsNV(GLuint path, GLsizei range);
GLuint __glewGenPathsNV(GLsizei range);
void __glewGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat* value);
void __glewGetPathColorGenivNV(GLenum color, GLenum pname, GLint* value);
void __glewGetPathCommandsNV(GLuint name, GLubyte* commands);
void __glewGetPathCoordsNV(GLuint name, GLfloat* coords);
void __glewGetPathDashArrayNV(GLuint name, GLfloat* dashArray);
GLfloat __glewGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments);
void __glewGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint fistPathName, GLsizei numPaths, GLsizei stride, GLfloat* metrics);
void __glewGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
void __glewGetPathParameterfvNV(GLuint name, GLenum param, GLfloat* value);
void __glewGetPathParameterivNV(GLuint name, GLenum param, GLint* value);
void __glewGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
void __glewGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat* value);
void __glewGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint* value);
void __glewInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
GLboolean __glewIsPathNV(GLuint path);
GLboolean __glewIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y);
GLboolean __glewIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y);
void __glewPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat* coeffs);
void __glewPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const GLvoid*coords);
void __glewPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void* coords);
void __glewPathCoverDepthFuncNV(GLenum zfunc);
void __glewPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat* dashArray);
void __glewPathFogGenNV(GLenum genMode);
void __glewPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
void __glewPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid*charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
void __glewPathParameterfNV(GLuint path, GLenum pname, GLfloat value);
void __glewPathParameterfvNV(GLuint path, GLenum pname, const GLfloat* value);
void __glewPathParameteriNV(GLuint path, GLenum pname, GLint value);
void __glewPathParameterivNV(GLuint path, GLenum pname, const GLint* value);
void __glewPathStencilDepthOffsetNV(GLfloat factor, GLfloat units);
void __glewPathStencilFuncNV(GLenum func, GLint ref, GLuint mask);
void __glewPathStringNV(GLuint path, GLenum format, GLsizei length, const void* pathString);
void __glewPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const GLvoid*coords);
void __glewPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void* coords);
void __glewPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat* coeffs);
GLboolean __glewPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat* x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
void __glewStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
void __glewStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask);
void __glewStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
void __glewStencilStrokePathNV(GLuint path, GLint reference, GLuint mask);
void __glewTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat* transformValues);
void __glewWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint paths[], const GLfloat weights[]);
void __glewFlushPixelDataRangeNV(GLenum target);
void __glewPixelDataRangeNV(GLenum target, GLsizei length, void* pointer);
void __glewPointParameteriNV(GLenum pname, GLint param);
void __glewPointParameterivNV(GLenum pname, const GLint* params);
void __glewGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT* params);
void __glewGetVideoivNV(GLuint video_slot, GLenum pname, GLint* params);
void __glewGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT* params);
void __glewGetVideouivNV(GLuint video_slot, GLenum pname, GLuint* params);
void __glewPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
void __glewPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
void __glewPrimitiveRestartIndexNV(GLuint index);
void __glewPrimitiveRestartNV(void);
void __glewCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
void __glewCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
void __glewCombinerParameterfNV(GLenum pname, GLfloat param);
void __glewCombinerParameterfvNV(GLenum pname, const GLfloat* params);
void __glewCombinerParameteriNV(GLenum pname, GLint param);
void __glewCombinerParameterivNV(GLenum pname, const GLint* params);
void __glewFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
void __glewGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* params);
void __glewGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* params);
void __glewGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat* params);
void __glewGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint* params);
void __glewGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat* params);
void __glewGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint* params);
void __glewCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat* params);
void __glewGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat* params);
void __glewGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT* params);
void __glewGetIntegerui64vNV(GLenum value, GLuint64EXT* result);
void __glewGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT* params);
GLboolean __glewIsBufferResidentNV(GLenum target);
GLboolean __glewIsNamedBufferResidentNV(GLuint buffer);
void __glewMakeBufferNonResidentNV(GLenum target);
void __glewMakeBufferResidentNV(GLenum target, GLenum access);
void __glewMakeNamedBufferNonResidentNV(GLuint buffer);
void __glewMakeNamedBufferResidentNV(GLuint buffer, GLenum access);
void __glewProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value);
void __glewProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
void __glewUniformui64NV(GLint location, GLuint64EXT value);
void __glewUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT* value);
void __glewTextureBarrierNV(void);
void __glewTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
void __glewTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
void __glewTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
void __glewTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
void __glewTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
void __glewTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
void __glewActiveVaryingNV(GLuint program, const GLchar *name);
void __glewBeginTransformFeedbackNV(GLenum primitiveMode);
void __glewBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer);
void __glewBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
void __glewBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void __glewEndTransformFeedbackNV(void);
void __glewGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
void __glewGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location);
GLint __glewGetVaryingLocationNV(GLuint program, const GLchar *name);
void __glewTransformFeedbackAttribsNV(GLuint count, const GLint *attribs, GLenum bufferMode);
void __glewTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
void __glewBindTransformFeedbackNV(GLenum target, GLuint id);
void __glewDeleteTransformFeedbacksNV(GLsizei n, const GLuint* ids);
void __glewDrawTransformFeedbackNV(GLenum mode, GLuint id);
void __glewGenTransformFeedbacksNV(GLsizei n, GLuint* ids);
GLboolean __glewIsTransformFeedbackNV(GLuint id);
void __glewPauseTransformFeedbackNV(void);
void __glewResumeTransformFeedbackNV(void);
void __glewVDPAUFiniNV(void);
void __glewVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei* length, GLint *values);
void __glewVDPAUInitNV(const void* vdpDevice, const GLvoid*getProcAddress);
void __glewVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface);
void __glewVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV* surfaces);
GLvdpauSurfaceNV __glewVDPAURegisterOutputSurfaceNV(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
GLvdpauSurfaceNV __glewVDPAURegisterVideoSurfaceNV(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
void __glewVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access);
void __glewVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV* surfaces);
void __glewVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface);
void __glewFlushVertexArrayRangeNV(void);
void __glewVertexArrayRangeNV(GLsizei length, void* pointer);
void __glewGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT* params);
void __glewGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT* params);
void __glewVertexAttribL1i64NV(GLuint index, GLint64EXT x);
void __glewVertexAttribL1i64vNV(GLuint index, const GLint64EXT* v);
void __glewVertexAttribL1ui64NV(GLuint index, GLuint64EXT x);
void __glewVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT* v);
void __glewVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y);
void __glewVertexAttribL2i64vNV(GLuint index, const GLint64EXT* v);
void __glewVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y);
void __glewVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT* v);
void __glewVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
void __glewVertexAttribL3i64vNV(GLuint index, const GLint64EXT* v);
void __glewVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
void __glewVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT* v);
void __glewVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
void __glewVertexAttribL4i64vNV(GLuint index, const GLint64EXT* v);
void __glewVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
void __glewVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT* v);
void __glewVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride);
void __glewBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
void __glewColorFormatNV(GLint size, GLenum type, GLsizei stride);
void __glewEdgeFlagFormatNV(GLsizei stride);
void __glewFogCoordFormatNV(GLenum type, GLsizei stride);
void __glewGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT result[]);
void __glewIndexFormatNV(GLenum type, GLsizei stride);
void __glewNormalFormatNV(GLenum type, GLsizei stride);
void __glewSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride);
void __glewTexCoordFormatNV(GLint size, GLenum type, GLsizei stride);
void __glewVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
void __glewVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride);
void __glewVertexFormatNV(GLint size, GLenum type, GLsizei stride);
GLboolean __glewAreProgramsResidentNV(GLsizei n, const GLuint* ids, GLboolean *residences);
void __glewBindProgramNV(GLenum target, GLuint id);
void __glewDeleteProgramsNV(GLsizei n, const GLuint* ids);
void __glewExecuteProgramNV(GLenum target, GLuint id, const GLfloat* params);
void __glewGenProgramsNV(GLsizei n, GLuint* ids);
void __glewGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble* params);
void __glewGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* params);
void __glewGetProgramStringNV(GLuint id, GLenum pname, GLubyte* program);
void __glewGetProgramivNV(GLuint id, GLenum pname, GLint* params);
void __glewGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint* params);
void __glewGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid** pointer);
void __glewGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble* params);
void __glewGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat* params);
void __glewGetVertexAttribivNV(GLuint index, GLenum pname, GLint* params);
GLboolean __glewIsProgramNV(GLuint id);
void __glewLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte* program);
void __glewProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void __glewProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble* params);
void __glewProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void __glewProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat* params);
void __glewProgramParameters4dvNV(GLenum target, GLuint index, GLsizei num, const GLdouble* params);
void __glewProgramParameters4fvNV(GLenum target, GLuint index, GLsizei num, const GLfloat* params);
void __glewRequestResidentProgramsNV(GLsizei n, GLuint* ids);
void __glewTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform);
void __glewVertexAttrib1dNV(GLuint index, GLdouble x);
void __glewVertexAttrib1dvNV(GLuint index, const GLdouble* v);
void __glewVertexAttrib1fNV(GLuint index, GLfloat x);
void __glewVertexAttrib1fvNV(GLuint index, const GLfloat* v);
void __glewVertexAttrib1sNV(GLuint index, GLshort x);
void __glewVertexAttrib1svNV(GLuint index, const GLshort* v);
void __glewVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y);
void __glewVertexAttrib2dvNV(GLuint index, const GLdouble* v);
void __glewVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y);
void __glewVertexAttrib2fvNV(GLuint index, const GLfloat* v);
void __glewVertexAttrib2sNV(GLuint index, GLshort x, GLshort y);
void __glewVertexAttrib2svNV(GLuint index, const GLshort* v);
void __glewVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void __glewVertexAttrib3dvNV(GLuint index, const GLdouble* v);
void __glewVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void __glewVertexAttrib3fvNV(GLuint index, const GLfloat* v);
void __glewVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z);
void __glewVertexAttrib3svNV(GLuint index, const GLshort* v);
void __glewVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void __glewVertexAttrib4dvNV(GLuint index, const GLdouble* v);
void __glewVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void __glewVertexAttrib4fvNV(GLuint index, const GLfloat* v);
void __glewVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void __glewVertexAttrib4svNV(GLuint index, const GLshort* v);
void __glewVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void __glewVertexAttrib4ubvNV(GLuint index, const GLubyte* v);
void __glewVertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
void __glewVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble* v);
void __glewVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat* v);
void __glewVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort* v);
void __glewVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble* v);
void __glewVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat* v);
void __glewVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort* v);
void __glewVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble* v);
void __glewVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat* v);
void __glewVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort* v);
void __glewVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble* v);
void __glewVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat* v);
void __glewVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort* v);
void __glewVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte* v);
void __glewBeginVideoCaptureNV(GLuint video_capture_slot);
void __glewBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
void __glewBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
void __glewEndVideoCaptureNV(GLuint video_capture_slot);
void __glewGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble* params);
void __glewGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat* params);
void __glewGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint* params);
void __glewGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint* params);
GLenum __glewVideoCaptureNV(GLuint video_capture_slot, GLuint* sequence_num, GLuint64EXT *capture_time);
void __glewVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble* params);
void __glewVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat* params);
void __glewVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint* params);
void __glewClearDepthfOES(GLclampd depth);
void __glewClipPlanefOES(GLenum plane, const GLfloat* equation);
void __glewDepthRangefOES(GLclampf n, GLclampf f);
void __glewFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
void __glewGetClipPlanefOES(GLenum plane, GLfloat* equation);
void __glewOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
const GLchar* __glewErrorStringREGAL(GLenum error);
GLboolean __glewGetExtensionREGAL(const GLchar* ext);
GLboolean __glewIsSupportedREGAL(const GLchar* ext);
void __glewDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat* points);
void __glewGetDetailTexFuncSGIS(GLenum target, GLfloat* points);
void __glewFogFuncSGIS(GLsizei n, const GLfloat* points);
void __glewGetFogFuncSGIS(GLfloat* points);
void __glewSampleMaskSGIS(GLclampf value, GLboolean invert);
void __glewSamplePatternSGIS(GLenum pattern);
void __glewGetSharpenTexFuncSGIS(GLenum target, GLfloat* points);
void __glewSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat* points);
void __glewTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei extent, GLint border, GLenum format, GLenum type, const void* pixels);
void __glewTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei extent, GLenum format, GLenum type, const void* pixels);
void __glewGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat* weights);
void __glewTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat* weights);
void __glewAsyncMarkerSGIX(GLuint marker);
void __glewDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range);
GLint __glewFinishAsyncSGIX(GLuint* markerp);
GLuint __glewGenAsyncMarkersSGIX(GLsizei range);
GLboolean __glewIsAsyncMarkerSGIX(GLuint marker);
GLint __glewPollAsyncSGIX(GLuint* markerp);
void __glewFlushRasterSGIX(void);
void __glewTextureFogSGIX(GLenum pname);
void __glewFragmentColorMaterialSGIX(GLenum face, GLenum mode);
void __glewFragmentLightModelfSGIX(GLenum pname, GLfloat param);
void __glewFragmentLightModelfvSGIX(GLenum pname, GLfloat* params);
void __glewFragmentLightModeliSGIX(GLenum pname, GLint param);
void __glewFragmentLightModelivSGIX(GLenum pname, GLint* params);
void __glewFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param);
void __glewFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat* params);
void __glewFragmentLightiSGIX(GLenum light, GLenum pname, GLint param);
void __glewFragmentLightivSGIX(GLenum light, GLenum pname, GLint* params);
void __glewFragmentMaterialfSGIX(GLenum face, GLenum pname, const GLfloat param);
void __glewFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat* params);
void __glewFragmentMaterialiSGIX(GLenum face, GLenum pname, const GLint param);
void __glewFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint* params);
void __glewGetFragmentLightfvSGIX(GLenum light, GLenum value, GLfloat* data);
void __glewGetFragmentLightivSGIX(GLenum light, GLenum value, GLint* data);
void __glewGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat* data);
void __glewGetFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint* data);
void __glewFrameZoomSGIX(GLint factor);
void __glewPixelTexGenSGIX(GLenum mode);
void __glewReferencePlaneSGIX(const GLdouble* equation);
void __glewSpriteParameterfSGIX(GLenum pname, GLfloat param);
void __glewSpriteParameterfvSGIX(GLenum pname, GLfloat* params);
void __glewSpriteParameteriSGIX(GLenum pname, GLint param);
void __glewSpriteParameterivSGIX(GLenum pname, GLint* params);
void __glewTagSampleBufferSGIX(void);
void __glewColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat* params);
void __glewColorTableParameterivSGI(GLenum target, GLenum pname, const GLint* params);
void __glewColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* table);
void __glewCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void __glewGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat* params);
void __glewGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint* params);
void __glewGetColorTableSGI(GLenum target, GLenum format, GLenum type, void* table);
void __glewFinishTextureSUNX(void);
void __glewGlobalAlphaFactorbSUN(GLbyte factor);
void __glewGlobalAlphaFactordSUN(GLdouble factor);
void __glewGlobalAlphaFactorfSUN(GLfloat factor);
void __glewGlobalAlphaFactoriSUN(GLint factor);
void __glewGlobalAlphaFactorsSUN(GLshort factor);
void __glewGlobalAlphaFactorubSUN(GLubyte factor);
void __glewGlobalAlphaFactoruiSUN(GLuint factor);
void __glewGlobalAlphaFactorusSUN(GLushort factor);
void __glewReadVideoPixelsSUN(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels);
void __glewReplacementCodePointerSUN(GLenum type, GLsizei stride, const void* pointer);
void __glewReplacementCodeubSUN(GLubyte code);
void __glewReplacementCodeubvSUN(const GLubyte* code);
void __glewReplacementCodeuiSUN(GLuint code);
void __glewReplacementCodeuivSUN(const GLuint* code);
void __glewReplacementCodeusSUN(GLushort code);
void __glewReplacementCodeusvSUN(const GLushort* code);
void __glewColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
void __glewColor3fVertex3fvSUN(const GLfloat* c, const GLfloat *v);
void __glewColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
void __glewColor4fNormal3fVertex3fvSUN(const GLfloat* c, const GLfloat *n, const GLfloat *v);
void __glewColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
void __glewColor4ubVertex2fvSUN(const GLubyte* c, const GLfloat *v);
void __glewColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
void __glewColor4ubVertex3fvSUN(const GLubyte* c, const GLfloat *v);
void __glewNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
void __glewNormal3fVertex3fvSUN(const GLfloat* n, const GLfloat *v);
void __glewReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
void __glewReplacementCodeuiColor3fVertex3fvSUN(const GLuint* rc, const GLfloat *c, const GLfloat *v);
void __glewReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
void __glewReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
void __glewReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
void __glewReplacementCodeuiColor4ubVertex3fvSUN(const GLuint* rc, const GLubyte *c, const GLfloat *v);
void __glewReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
void __glewReplacementCodeuiNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat *n, const GLfloat *v);
void __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
void __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
void __glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
void __glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
void __glewReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
void __glewReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint* rc, const GLfloat *tc, const GLfloat *v);
void __glewReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
void __glewReplacementCodeuiVertex3fvSUN(const GLuint* rc, const GLfloat *v);
void __glewTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
void __glewTexCoord2fColor3fVertex3fvSUN(const GLfloat* tc, const GLfloat *c, const GLfloat *v);
void __glewTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
void __glewTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat* tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
void __glewTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
void __glewTexCoord2fColor4ubVertex3fvSUN(const GLfloat* tc, const GLubyte *c, const GLfloat *v);
void __glewTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
void __glewTexCoord2fNormal3fVertex3fvSUN(const GLfloat* tc, const GLfloat *n, const GLfloat *v);
void __glewTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
void __glewTexCoord2fVertex3fvSUN(const GLfloat* tc, const GLfloat *v);
void __glewTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void __glewTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat* tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
void __glewTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void __glewTexCoord4fVertex4fvSUN(const GLfloat* tc, const GLfloat *v);
void __glewAddSwapHintRectWIN(GLint x, GLint y, GLsizei width, GLsizei height);
GLenum glewInit (void);
GLboolean glewIsSupported (const char *name);
GLboolean glewGetExtension (const char *name);
const GLubyte * glewGetErrorString (GLenum error);
const GLubyte * glewGetString (GLenum name);
]==]

ffi.cdef(def)

local library = 
{
	["OSX"] = "OpenGL.framework/OpenGL",
	["Windows"] = "OPENGL32.DLL",
	["Linux"] = "libGL.so",
	["BSD"] = "libGL.so",
	["POSIX"] = "libGL.so",
	["Other"] = "libGL.so",
}

library = ffi.load(library[ffi.os])

local gl = {}

for line in def:gmatch("(.-)\n") do
	local func_name = line:match(" (gl%u.-) %(")
	if func_name then
		gl[func_name:sub(3)] = function(...) 
			return library[func_name](...)
		end
	end
end

return gl