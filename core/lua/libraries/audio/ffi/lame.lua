
local header = [[
typedef void(*lame_report_function)(const char *format, va_list ap);
typedef enum vbr_mode_e { vbr_off = 0, vbr_mt, vbr_rh, vbr_abr, vbr_mtrh, vbr_max_indicator, vbr_default = vbr_mtrh } vbr_mode;
typedef enum MPEG_mode_e { STEREO = 0, JOINT_STEREO, DUAL_CHANNEL, MONO, NOT_SET, MAX_INDICATOR } MPEG_mode;
typedef enum Padding_type_e { PAD_NO = 0, PAD_ALL, PAD_ADJUST, PAD_MAX_INDICATOR } Padding_type;
typedef enum preset_mode_e { ABR_8 = 8, ABR_320 = 320, V9 = 410, VBR_10 = 410, V8 = 420, VBR_20 = 420, V7 = 430, VBR_30 = 430, V6 = 440, VBR_40 = 440, V5 = 450, VBR_50 = 450, V4 = 460, VBR_60 = 460, V3 = 470, VBR_70 = 470, V2 = 480, VBR_80 = 480, V1 = 490, VBR_90 = 490, V0 = 500, VBR_100 = 500, R3MIX = 1000, STANDARD = 1001, EXTREME = 1002, INSANE = 1003, STANDARD_FAST = 1004, EXTREME_FAST = 1005, MEDIUM = 1006, MEDIUM_FAST = 1007 } preset_mode;
typedef enum asm_optimizations_e { MMX = 1, AMD_3DNOW = 2, SSE = 3 } asm_optimizations;
typedef enum Psy_model_e { PSY_GPSYCHO = 1, PSY_NSPSYTUNE = 2 } Psy_model;
typedef enum buffer_constraint_e { MDB_DEFAULT = 0, MDB_STRICT_ISO = 1, MDB_MAXIMUM = 2 } buffer_constraint;
struct lame_global_struct;
typedef struct lame_global_struct lame_global_flags;
typedef lame_global_flags *lame_t;
lame_global_flags * __cdecl lame_init(void);
int __cdecl lame_set_num_samples(lame_global_flags *, unsigned long);
unsigned long __cdecl lame_get_num_samples(const lame_global_flags *);
int __cdecl lame_set_in_samplerate(lame_global_flags *, int);
int __cdecl lame_get_in_samplerate(const lame_global_flags *);
int __cdecl lame_set_num_channels(lame_global_flags *, int);
int __cdecl lame_get_num_channels(const lame_global_flags *);
int __cdecl lame_set_scale(lame_global_flags *, float);
float __cdecl lame_get_scale(const lame_global_flags *);
int __cdecl lame_set_scale_left(lame_global_flags *, float);
float __cdecl lame_get_scale_left(const lame_global_flags *);
int __cdecl lame_set_scale_right(lame_global_flags *, float);
float __cdecl lame_get_scale_right(const lame_global_flags *);
int __cdecl lame_set_out_samplerate(lame_global_flags *, int);
int __cdecl lame_get_out_samplerate(const lame_global_flags *);
int __cdecl lame_set_analysis(lame_global_flags *, int);
int __cdecl lame_get_analysis(const lame_global_flags *);
int __cdecl lame_set_bWriteVbrTag(lame_global_flags *, int);
int __cdecl lame_get_bWriteVbrTag(const lame_global_flags *);
int __cdecl lame_set_decode_only(lame_global_flags *, int);
int __cdecl lame_get_decode_only(const lame_global_flags *);
int __cdecl lame_set_quality(lame_global_flags *, int);
int __cdecl lame_get_quality(const lame_global_flags *);
int __cdecl lame_set_mode(lame_global_flags *, MPEG_mode);
MPEG_mode __cdecl lame_get_mode(const lame_global_flags *);
int __cdecl lame_set_force_ms(lame_global_flags *, int);
int __cdecl lame_get_force_ms(const lame_global_flags *);
int __cdecl lame_set_free_format(lame_global_flags *, int);
int __cdecl lame_get_free_format(const lame_global_flags *);
int __cdecl lame_set_findReplayGain(lame_global_flags *, int);
int __cdecl lame_get_findReplayGain(const lame_global_flags *);
int __cdecl lame_set_decode_on_the_fly(lame_global_flags *, int);
int __cdecl lame_get_decode_on_the_fly(const lame_global_flags *);
int __cdecl lame_set_nogap_total(lame_global_flags*, int);
int __cdecl lame_get_nogap_total(const lame_global_flags*);
int __cdecl lame_set_nogap_currentindex(lame_global_flags*, int);
int __cdecl lame_get_nogap_currentindex(const lame_global_flags*);
int __cdecl lame_set_errorf(lame_global_flags *, lame_report_function);
int __cdecl lame_set_debugf(lame_global_flags *, lame_report_function);
int __cdecl lame_set_msgf(lame_global_flags *, lame_report_function);
int __cdecl lame_set_brate(lame_global_flags *, int);
int __cdecl lame_get_brate(const lame_global_flags *);
int __cdecl lame_set_compression_ratio(lame_global_flags *, float);
float __cdecl lame_get_compression_ratio(const lame_global_flags *);
int __cdecl lame_set_preset(lame_global_flags* gfp, int);
int __cdecl lame_set_asm_optimizations(lame_global_flags* gfp, int, int);
int __cdecl lame_set_copyright(lame_global_flags *, int);
int __cdecl lame_get_copyright(const lame_global_flags *);
int __cdecl lame_set_original(lame_global_flags *, int);
int __cdecl lame_get_original(const lame_global_flags *);
int __cdecl lame_set_error_protection(lame_global_flags *, int);
int __cdecl lame_get_error_protection(const lame_global_flags *);
int __cdecl lame_set_extension(lame_global_flags *, int);
int __cdecl lame_get_extension(const lame_global_flags *);
int __cdecl lame_set_strict_ISO(lame_global_flags *, int);
int __cdecl lame_get_strict_ISO(const lame_global_flags *);
int __cdecl lame_set_disable_reservoir(lame_global_flags *, int);
int __cdecl lame_get_disable_reservoir(const lame_global_flags *);
int __cdecl lame_set_quant_comp(lame_global_flags *, int);
int __cdecl lame_get_quant_comp(const lame_global_flags *);
int __cdecl lame_set_quant_comp_short(lame_global_flags *, int);
int __cdecl lame_get_quant_comp_short(const lame_global_flags *);
int __cdecl lame_set_experimentalX(lame_global_flags *, int);
int __cdecl lame_get_experimentalX(const lame_global_flags *);
int __cdecl lame_set_experimentalY(lame_global_flags *, int);
int __cdecl lame_get_experimentalY(const lame_global_flags *);
int __cdecl lame_set_experimentalZ(lame_global_flags *, int);
int __cdecl lame_get_experimentalZ(const lame_global_flags *);
int __cdecl lame_set_exp_nspsytune(lame_global_flags *, int);
int __cdecl lame_get_exp_nspsytune(const lame_global_flags *);
void __cdecl lame_set_msfix(lame_global_flags *, double);
float __cdecl lame_get_msfix(const lame_global_flags *);
int __cdecl lame_set_VBR(lame_global_flags *, vbr_mode);
vbr_mode __cdecl lame_get_VBR(const lame_global_flags *);
int __cdecl lame_set_VBR_q(lame_global_flags *, int);
int __cdecl lame_get_VBR_q(const lame_global_flags *);
int __cdecl lame_set_VBR_quality(lame_global_flags *, float);
float __cdecl lame_get_VBR_quality(const lame_global_flags *);
int __cdecl lame_set_VBR_mean_bitrate_kbps(lame_global_flags *, int);
int __cdecl lame_get_VBR_mean_bitrate_kbps(const lame_global_flags *);
int __cdecl lame_set_VBR_min_bitrate_kbps(lame_global_flags *, int);
int __cdecl lame_get_VBR_min_bitrate_kbps(const lame_global_flags *);
int __cdecl lame_set_VBR_max_bitrate_kbps(lame_global_flags *, int);
int __cdecl lame_get_VBR_max_bitrate_kbps(const lame_global_flags *);
int __cdecl lame_set_VBR_hard_min(lame_global_flags *, int);
int __cdecl lame_get_VBR_hard_min(const lame_global_flags *);
int __cdecl lame_set_lowpassfreq(lame_global_flags *, int);
int __cdecl lame_get_lowpassfreq(const lame_global_flags *);
int __cdecl lame_set_lowpasswidth(lame_global_flags *, int);
int __cdecl lame_get_lowpasswidth(const lame_global_flags *);
int __cdecl lame_set_highpassfreq(lame_global_flags *, int);
int __cdecl lame_get_highpassfreq(const lame_global_flags *);
int __cdecl lame_set_highpasswidth(lame_global_flags *, int);
int __cdecl lame_get_highpasswidth(const lame_global_flags *);
int __cdecl lame_set_ATHonly(lame_global_flags *, int);
int __cdecl lame_get_ATHonly(const lame_global_flags *);
int __cdecl lame_set_ATHshort(lame_global_flags *, int);
int __cdecl lame_get_ATHshort(const lame_global_flags *);
int __cdecl lame_set_noATH(lame_global_flags *, int);
int __cdecl lame_get_noATH(const lame_global_flags *);
int __cdecl lame_set_ATHtype(lame_global_flags *, int);
int __cdecl lame_get_ATHtype(const lame_global_flags *);
int __cdecl lame_set_ATHlower(lame_global_flags *, float);
float __cdecl lame_get_ATHlower(const lame_global_flags *);
int __cdecl lame_set_athaa_type(lame_global_flags *, int);
int __cdecl lame_get_athaa_type(const lame_global_flags *);
int __cdecl lame_set_athaa_sensitivity(lame_global_flags *, float);
float __cdecl lame_get_athaa_sensitivity(const lame_global_flags*);
int __cdecl lame_set_allow_diff_short(lame_global_flags *, int);
int __cdecl lame_get_allow_diff_short(const lame_global_flags *);
int __cdecl lame_set_useTemporal(lame_global_flags *, int);
int __cdecl lame_get_useTemporal(const lame_global_flags *);
int __cdecl lame_set_interChRatio(lame_global_flags *, float);
float __cdecl lame_get_interChRatio(const lame_global_flags *);
int __cdecl lame_set_no_short_blocks(lame_global_flags *, int);
int __cdecl lame_get_no_short_blocks(const lame_global_flags *);
int __cdecl lame_set_force_short_blocks(lame_global_flags *, int);
int __cdecl lame_get_force_short_blocks(const lame_global_flags *);
int __cdecl lame_set_emphasis(lame_global_flags *, int);
int __cdecl lame_get_emphasis(const lame_global_flags *);
int __cdecl lame_get_version(const lame_global_flags *);
int __cdecl lame_get_encoder_delay(const lame_global_flags *);
int __cdecl lame_get_encoder_padding(const lame_global_flags *);
int __cdecl lame_get_framesize(const lame_global_flags *);
int __cdecl lame_get_mf_samples_to_encode(const lame_global_flags* gfp);
int __cdecl lame_get_size_mp3buffer(const lame_global_flags* gfp);
int __cdecl lame_get_frameNum(const lame_global_flags *);
int __cdecl lame_get_totalframes(const lame_global_flags *);
int __cdecl lame_get_RadioGain(const lame_global_flags *);
int __cdecl lame_get_AudiophileGain(const lame_global_flags *);
float __cdecl lame_get_PeakSample(const lame_global_flags *);
int __cdecl lame_get_noclipGainChange(const lame_global_flags *);
float __cdecl lame_get_noclipScale(const lame_global_flags *);
int __cdecl lame_init_params(lame_global_flags *);
const char* __cdecl get_lame_version(void);
const char* __cdecl get_lame_short_version(void);
const char* __cdecl get_lame_very_short_version(void);
const char* __cdecl get_psy_version(void);
const char* __cdecl get_lame_url(void);
const char* __cdecl get_lame_os_bitness(void);
typedef struct { int major;
int minor;
int alpha;
int beta;
int psy_major;
int psy_minor;
int psy_alpha;
int psy_beta;
const char *features;
} lame_version_t;
void __cdecl get_lame_version_numerical(lame_version_t *);
void __cdecl lame_print_config(const lame_global_flags* gfp);
void __cdecl lame_print_internals(const lame_global_flags *gfp);
int __cdecl lame_encode_buffer( lame_global_flags* gfp, const short int buffer_l[], const short int buffer_r[], const int nsamples, unsigned char* mp3buf, const int mp3buf_size);
int __cdecl lame_encode_buffer_interleaved( lame_global_flags* gfp, short int pcm[], int num_samples, unsigned char* mp3buf, int mp3buf_size);
int __cdecl lame_encode_buffer_float( lame_global_flags* gfp, const float pcm_l[], const float pcm_r[], const int nsamples, unsigned char* mp3buf, const int mp3buf_size);
int __cdecl lame_encode_buffer_ieee_float( lame_t gfp, const float pcm_l[], const float pcm_r[], const int nsamples, unsigned char * mp3buf, const int mp3buf_size);
int __cdecl lame_encode_buffer_interleaved_ieee_float( lame_t gfp, const float pcm[], const int nsamples, unsigned char * mp3buf, const int mp3buf_size);
int __cdecl lame_encode_buffer_ieee_double( lame_t gfp, const double pcm_l[], const double pcm_r[], const int nsamples, unsigned char * mp3buf, const int mp3buf_size);
int __cdecl lame_encode_buffer_interleaved_ieee_double( lame_t gfp, const double pcm[], const int nsamples, unsigned char * mp3buf, const int mp3buf_size);
int __cdecl lame_encode_buffer_long( lame_global_flags* gfp, const long buffer_l[], const long buffer_r[], const int nsamples, unsigned char* mp3buf, const int mp3buf_size);
int __cdecl lame_encode_buffer_long2( lame_global_flags* gfp, const long buffer_l[], const long buffer_r[], const int nsamples, unsigned char* mp3buf, const int mp3buf_size);
int __cdecl lame_encode_buffer_int( lame_global_flags* gfp, const int buffer_l[], const int buffer_r[], const int nsamples, unsigned char* mp3buf, const int mp3buf_size);
int __cdecl lame_encode_flush( lame_global_flags * gfp, unsigned char* mp3buf, int size);
int __cdecl lame_encode_flush_nogap( lame_global_flags * gfp, unsigned char* mp3buf, int size);
int __cdecl lame_init_bitstream( lame_global_flags * gfp);
void __cdecl lame_bitrate_hist( const lame_global_flags * gfp, int bitrate_count[14]);
void __cdecl lame_bitrate_kbps( const lame_global_flags * gfp, int bitrate_kbps[14]);
void __cdecl lame_stereo_mode_hist( const lame_global_flags * gfp, int stereo_mode_count[4]);
void __cdecl lame_bitrate_stereo_mode_hist( const lame_global_flags * gfp, int bitrate_stmode_count[14][4]);
void __cdecl lame_block_type_hist( const lame_global_flags * gfp, int btype_count[6]);
void __cdecl lame_bitrate_block_type_hist(const lame_global_flags * gfp, int bitrate_btype_count[14][6]);
void __cdecl lame_mp3_tags_fid(lame_global_flags *, void* fid);
size_t __cdecl lame_get_lametag_frame( const lame_global_flags *, unsigned char* buffer, size_t size);
int __cdecl lame_close(lame_global_flags *);
struct hip_global_struct;
typedef struct hip_global_struct hip_global_flags;
typedef hip_global_flags *hip_t;
typedef struct { int header_parsed;
int stereo;
int samplerate;
int bitrate;
int mode;
int mode_ext;
int framesize;
unsigned long nsamp;
int totalframes;
int framenum;
} mp3data_struct;
hip_t __cdecl hip_decode_init(void);
int __cdecl hip_decode_exit(hip_t gfp);
void __cdecl hip_set_errorf(hip_t gfp, lame_report_function f);
void __cdecl hip_set_debugf(hip_t gfp, lame_report_function f);
void __cdecl hip_set_msgf(hip_t gfp, lame_report_function f);
int __cdecl hip_decode(hip_t gfp , unsigned char * mp3buf , size_t len , short pcm_l[] , short pcm_r[] );
int __cdecl hip_decode_headers(hip_t gfp , unsigned char* mp3buf , size_t len , short pcm_l[] , short pcm_r[] , mp3data_struct* mp3data );
int __cdecl hip_decode1(hip_t gfp , unsigned char* mp3buf , size_t len , short pcm_l[] , short pcm_r[] );
int __cdecl hip_decode1_headers(hip_t gfp , unsigned char* mp3buf , size_t len , short pcm_l[] , short pcm_r[] , mp3data_struct* mp3data );
int __cdecl hip_decode1_headersB(hip_t gfp , unsigned char* mp3buf , size_t len , short pcm_l[] , short pcm_r[] , mp3data_struct* mp3data , int *enc_delay , int *enc_padding );
void __cdecl id3tag_genre_list( void(*handler)(int, const char *, void *), void* cookie);
void __cdecl id3tag_init(lame_t gfp);
void __cdecl id3tag_add_v2(lame_t gfp);
void __cdecl id3tag_v1_only(lame_t gfp);
void __cdecl id3tag_v2_only(lame_t gfp);
void __cdecl id3tag_space_v1(lame_t gfp);
void __cdecl id3tag_pad_v2(lame_t gfp);
void __cdecl id3tag_set_pad(lame_t gfp, size_t n);
void __cdecl id3tag_set_title(lame_t gfp, const char* title);
void __cdecl id3tag_set_artist(lame_t gfp, const char* artist);
void __cdecl id3tag_set_album(lame_t gfp, const char* album);
void __cdecl id3tag_set_year(lame_t gfp, const char* year);
void __cdecl id3tag_set_comment(lame_t gfp, const char* comment);
int __cdecl id3tag_set_track(lame_t gfp, const char* track);
int __cdecl id3tag_set_genre(lame_t gfp, const char* genre);
int __cdecl id3tag_set_fieldvalue(lame_t gfp, const char* fieldvalue);
int __cdecl id3tag_set_albumart(lame_t gfp, const char* image, size_t size);
size_t __cdecl lame_get_id3v1_tag(lame_t gfp, unsigned char* buffer, size_t size);
size_t __cdecl lame_get_id3v2_tag(lame_t gfp, unsigned char* buffer, size_t size);
void __cdecl lame_set_write_id3tag_automatic(lame_global_flags * gfp, int);
int __cdecl lame_get_write_id3tag_automatic(lame_global_flags const* gfp);
int __cdecl id3tag_set_textinfo_latin1(lame_t gfp, char const *id, char const *text);
int __cdecl id3tag_set_comment_latin1(lame_t gfp, char const *lang, char const *desc, char const *text);
int __cdecl id3tag_set_fieldvalue_utf16(lame_t gfp, const unsigned short *fieldvalue);
int __cdecl id3tag_set_textinfo_utf16(lame_t gfp, char const *id, unsigned short const *text);
int __cdecl id3tag_set_comment_utf16(lame_t gfp, char const *lang, unsigned short const *desc, unsigned short const *text);
extern const int bitrate_table[3][16];
extern const int samplerate_table[3][4];
int __cdecl lame_get_bitrate(int mpeg_version, int table_index);
int __cdecl lame_get_samplerate(int mpeg_version, int table_index);
typedef enum { LAME_OKAY = 0, LAME_NOERROR = 0, LAME_GENERICERROR = -1, LAME_NOMEM = -10, LAME_BADBITRATE = -11, LAME_BADSAMPFREQ = -12, LAME_INTERNALERROR = -13, FRONTEND_READERROR = -80, FRONTEND_WRITEERROR = -81, FRONTEND_FILETOOLARGE = -82 } lame_errorcodes_t;
]]

ffi.cdef(header)

local lib = ffi.load("mp3lame")

return lib